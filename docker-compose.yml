version: '3.8'

services:
  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    env_file: .env
    ports:
      - "5433:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network

  backend1:
    build: ./whackywheels
    container_name: spring_backend_1
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SERVER_PORT: 8080
    env_file: .env
    networks:
      - app-network
    depends_on:
      - db

  backend2:
    build: ./whackywheels
    container_name: spring_backend_2
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SERVER_PORT: 8080
    env_file: .env
    networks:
      - app-network
    depends_on:
      - db

  loadbalancer:
    build:
      context: .
      dockerfile: Dockerfile.apache
    ports:
      - "80:80"
    networks:
      - app-network

  frontend:
    build: ./ww-frontend
    container_name: angular_frontend
    ports:
      - "4200:4200"
    depends_on:
      - loadbalancer
    volumes:
      - ./ww-frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NG_CLI_ANALYTICS=off 
    command: npx ng serve --host 0.0.0.0 --poll=2000
    networks:
      - app-network

volumes:
  db_data:

networks:
  app-network:
    driver: bridge