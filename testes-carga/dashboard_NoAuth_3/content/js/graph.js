/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 1717.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 2.0], [0.7, 2.0], [0.8, 3.0], [0.9, 4.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 7.0], [5.1, 7.0], [5.2, 7.0], [5.3, 7.0], [5.4, 7.0], [5.5, 7.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 7.0], [6.0, 7.0], [6.1, 7.0], [6.2, 7.0], [6.3, 7.0], [6.4, 7.0], [6.5, 7.0], [6.6, 7.0], [6.7, 7.0], [6.8, 7.0], [6.9, 7.0], [7.0, 8.0], [7.1, 8.0], [7.2, 8.0], [7.3, 8.0], [7.4, 8.0], [7.5, 8.0], [7.6, 8.0], [7.7, 8.0], [7.8, 8.0], [7.9, 8.0], [8.0, 8.0], [8.1, 8.0], [8.2, 8.0], [8.3, 8.0], [8.4, 8.0], [8.5, 8.0], [8.6, 8.0], [8.7, 8.0], [8.8, 8.0], [8.9, 8.0], [9.0, 8.0], [9.1, 8.0], [9.2, 8.0], [9.3, 8.0], [9.4, 8.0], [9.5, 8.0], [9.6, 9.0], [9.7, 9.0], [9.8, 9.0], [9.9, 9.0], [10.0, 9.0], [10.1, 9.0], [10.2, 9.0], [10.3, 9.0], [10.4, 9.0], [10.5, 9.0], [10.6, 9.0], [10.7, 9.0], [10.8, 9.0], [10.9, 9.0], [11.0, 9.0], [11.1, 9.0], [11.2, 10.0], [11.3, 10.0], [11.4, 10.0], [11.5, 10.0], [11.6, 10.0], [11.7, 10.0], [11.8, 10.0], [11.9, 10.0], [12.0, 10.0], [12.1, 10.0], [12.2, 10.0], [12.3, 10.0], [12.4, 10.0], [12.5, 10.0], [12.6, 10.0], [12.7, 10.0], [12.8, 11.0], [12.9, 11.0], [13.0, 11.0], [13.1, 11.0], [13.2, 11.0], [13.3, 11.0], [13.4, 11.0], [13.5, 11.0], [13.6, 11.0], [13.7, 11.0], [13.8, 11.0], [13.9, 11.0], [14.0, 11.0], [14.1, 11.0], [14.2, 12.0], [14.3, 12.0], [14.4, 12.0], [14.5, 12.0], [14.6, 12.0], [14.7, 12.0], [14.8, 12.0], [14.9, 12.0], [15.0, 13.0], [15.1, 13.0], [15.2, 13.0], [15.3, 13.0], [15.4, 13.0], [15.5, 13.0], [15.6, 13.0], [15.7, 13.0], [15.8, 13.0], [15.9, 13.0], [16.0, 13.0], [16.1, 14.0], [16.2, 14.0], [16.3, 14.0], [16.4, 14.0], [16.5, 14.0], [16.6, 14.0], [16.7, 14.0], [16.8, 15.0], [16.9, 15.0], [17.0, 15.0], [17.1, 15.0], [17.2, 15.0], [17.3, 15.0], [17.4, 15.0], [17.5, 15.0], [17.6, 16.0], [17.7, 16.0], [17.8, 16.0], [17.9, 16.0], [18.0, 16.0], [18.1, 16.0], [18.2, 16.0], [18.3, 17.0], [18.4, 17.0], [18.5, 17.0], [18.6, 17.0], [18.7, 17.0], [18.8, 17.0], [18.9, 17.0], [19.0, 17.0], [19.1, 18.0], [19.2, 18.0], [19.3, 18.0], [19.4, 18.0], [19.5, 18.0], [19.6, 18.0], [19.7, 18.0], [19.8, 18.0], [19.9, 18.0], [20.0, 18.0], [20.1, 19.0], [20.2, 19.0], [20.3, 19.0], [20.4, 19.0], [20.5, 19.0], [20.6, 19.0], [20.7, 20.0], [20.8, 20.0], [20.9, 20.0], [21.0, 20.0], [21.1, 20.0], [21.2, 20.0], [21.3, 20.0], [21.4, 20.0], [21.5, 21.0], [21.6, 21.0], [21.7, 21.0], [21.8, 21.0], [21.9, 21.0], [22.0, 21.0], [22.1, 21.0], [22.2, 21.0], [22.3, 21.0], [22.4, 22.0], [22.5, 22.0], [22.6, 22.0], [22.7, 22.0], [22.8, 22.0], [22.9, 22.0], [23.0, 23.0], [23.1, 23.0], [23.2, 23.0], [23.3, 23.0], [23.4, 23.0], [23.5, 23.0], [23.6, 23.0], [23.7, 23.0], [23.8, 24.0], [23.9, 24.0], [24.0, 24.0], [24.1, 24.0], [24.2, 24.0], [24.3, 24.0], [24.4, 24.0], [24.5, 25.0], [24.6, 25.0], [24.7, 25.0], [24.8, 25.0], [24.9, 25.0], [25.0, 25.0], [25.1, 25.0], [25.2, 26.0], [25.3, 26.0], [25.4, 26.0], [25.5, 26.0], [25.6, 26.0], [25.7, 26.0], [25.8, 27.0], [25.9, 27.0], [26.0, 27.0], [26.1, 27.0], [26.2, 27.0], [26.3, 27.0], [26.4, 27.0], [26.5, 28.0], [26.6, 28.0], [26.7, 28.0], [26.8, 28.0], [26.9, 28.0], [27.0, 28.0], [27.1, 29.0], [27.2, 29.0], [27.3, 29.0], [27.4, 29.0], [27.5, 29.0], [27.6, 29.0], [27.7, 30.0], [27.8, 30.0], [27.9, 30.0], [28.0, 30.0], [28.1, 30.0], [28.2, 30.0], [28.3, 30.0], [28.4, 31.0], [28.5, 31.0], [28.6, 31.0], [28.7, 31.0], [28.8, 31.0], [28.9, 31.0], [29.0, 32.0], [29.1, 32.0], [29.2, 32.0], [29.3, 32.0], [29.4, 32.0], [29.5, 33.0], [29.6, 33.0], [29.7, 33.0], [29.8, 33.0], [29.9, 33.0], [30.0, 33.0], [30.1, 34.0], [30.2, 34.0], [30.3, 34.0], [30.4, 34.0], [30.5, 34.0], [30.6, 34.0], [30.7, 34.0], [30.8, 35.0], [30.9, 35.0], [31.0, 35.0], [31.1, 35.0], [31.2, 35.0], [31.3, 35.0], [31.4, 36.0], [31.5, 36.0], [31.6, 36.0], [31.7, 36.0], [31.8, 36.0], [31.9, 36.0], [32.0, 37.0], [32.1, 37.0], [32.2, 37.0], [32.3, 37.0], [32.4, 37.0], [32.5, 38.0], [32.6, 38.0], [32.7, 38.0], [32.8, 38.0], [32.9, 38.0], [33.0, 38.0], [33.1, 39.0], [33.2, 39.0], [33.3, 39.0], [33.4, 39.0], [33.5, 39.0], [33.6, 40.0], [33.7, 40.0], [33.8, 40.0], [33.9, 40.0], [34.0, 40.0], [34.1, 41.0], [34.2, 41.0], [34.3, 41.0], [34.4, 41.0], [34.5, 41.0], [34.6, 41.0], [34.7, 42.0], [34.8, 42.0], [34.9, 42.0], [35.0, 42.0], [35.1, 42.0], [35.2, 43.0], [35.3, 43.0], [35.4, 43.0], [35.5, 43.0], [35.6, 44.0], [35.7, 44.0], [35.8, 44.0], [35.9, 44.0], [36.0, 44.0], [36.1, 45.0], [36.2, 45.0], [36.3, 45.0], [36.4, 46.0], [36.5, 46.0], [36.6, 46.0], [36.7, 46.0], [36.8, 46.0], [36.9, 47.0], [37.0, 47.0], [37.1, 47.0], [37.2, 47.0], [37.3, 48.0], [37.4, 48.0], [37.5, 48.0], [37.6, 48.0], [37.7, 48.0], [37.8, 49.0], [37.9, 49.0], [38.0, 49.0], [38.1, 49.0], [38.2, 50.0], [38.3, 50.0], [38.4, 50.0], [38.5, 50.0], [38.6, 50.0], [38.7, 51.0], [38.8, 51.0], [38.9, 51.0], [39.0, 51.0], [39.1, 52.0], [39.2, 52.0], [39.3, 52.0], [39.4, 52.0], [39.5, 52.0], [39.6, 53.0], [39.7, 53.0], [39.8, 53.0], [39.9, 53.0], [40.0, 53.0], [40.1, 54.0], [40.2, 54.0], [40.3, 54.0], [40.4, 54.0], [40.5, 54.0], [40.6, 55.0], [40.7, 55.0], [40.8, 55.0], [40.9, 55.0], [41.0, 56.0], [41.1, 56.0], [41.2, 56.0], [41.3, 56.0], [41.4, 56.0], [41.5, 57.0], [41.6, 57.0], [41.7, 57.0], [41.8, 57.0], [41.9, 58.0], [42.0, 58.0], [42.1, 58.0], [42.2, 58.0], [42.3, 58.0], [42.4, 58.0], [42.5, 59.0], [42.6, 59.0], [42.7, 59.0], [42.8, 60.0], [42.9, 60.0], [43.0, 60.0], [43.1, 61.0], [43.2, 61.0], [43.3, 61.0], [43.4, 62.0], [43.5, 62.0], [43.6, 62.0], [43.7, 62.0], [43.8, 63.0], [43.9, 63.0], [44.0, 63.0], [44.1, 63.0], [44.2, 63.0], [44.3, 64.0], [44.4, 64.0], [44.5, 64.0], [44.6, 64.0], [44.7, 65.0], [44.8, 65.0], [44.9, 65.0], [45.0, 65.0], [45.1, 66.0], [45.2, 66.0], [45.3, 66.0], [45.4, 66.0], [45.5, 67.0], [45.6, 67.0], [45.7, 67.0], [45.8, 68.0], [45.9, 68.0], [46.0, 68.0], [46.1, 69.0], [46.2, 69.0], [46.3, 69.0], [46.4, 70.0], [46.5, 70.0], [46.6, 70.0], [46.7, 70.0], [46.8, 71.0], [46.9, 71.0], [47.0, 71.0], [47.1, 71.0], [47.2, 72.0], [47.3, 72.0], [47.4, 72.0], [47.5, 72.0], [47.6, 73.0], [47.7, 73.0], [47.8, 73.0], [47.9, 74.0], [48.0, 74.0], [48.1, 74.0], [48.2, 74.0], [48.3, 75.0], [48.4, 75.0], [48.5, 75.0], [48.6, 76.0], [48.7, 76.0], [48.8, 76.0], [48.9, 77.0], [49.0, 77.0], [49.1, 77.0], [49.2, 78.0], [49.3, 78.0], [49.4, 78.0], [49.5, 79.0], [49.6, 79.0], [49.7, 79.0], [49.8, 80.0], [49.9, 80.0], [50.0, 80.0], [50.1, 81.0], [50.2, 81.0], [50.3, 81.0], [50.4, 82.0], [50.5, 82.0], [50.6, 82.0], [50.7, 83.0], [50.8, 83.0], [50.9, 83.0], [51.0, 83.0], [51.1, 84.0], [51.2, 84.0], [51.3, 84.0], [51.4, 85.0], [51.5, 85.0], [51.6, 85.0], [51.7, 85.0], [51.8, 86.0], [51.9, 86.0], [52.0, 87.0], [52.1, 87.0], [52.2, 87.0], [52.3, 88.0], [52.4, 88.0], [52.5, 89.0], [52.6, 89.0], [52.7, 90.0], [52.8, 90.0], [52.9, 90.0], [53.0, 91.0], [53.1, 91.0], [53.2, 92.0], [53.3, 92.0], [53.4, 93.0], [53.5, 93.0], [53.6, 93.0], [53.7, 94.0], [53.8, 95.0], [53.9, 95.0], [54.0, 95.0], [54.1, 96.0], [54.2, 96.0], [54.3, 97.0], [54.4, 97.0], [54.5, 98.0], [54.6, 98.0], [54.7, 98.0], [54.8, 99.0], [54.9, 99.0], [55.0, 100.0], [55.1, 101.0], [55.2, 101.0], [55.3, 102.0], [55.4, 102.0], [55.5, 103.0], [55.6, 104.0], [55.7, 104.0], [55.8, 104.0], [55.9, 104.0], [56.0, 105.0], [56.1, 105.0], [56.2, 105.0], [56.3, 106.0], [56.4, 106.0], [56.5, 107.0], [56.6, 107.0], [56.7, 108.0], [56.8, 108.0], [56.9, 108.0], [57.0, 109.0], [57.1, 109.0], [57.2, 110.0], [57.3, 111.0], [57.4, 112.0], [57.5, 112.0], [57.6, 114.0], [57.7, 114.0], [57.8, 115.0], [57.9, 115.0], [58.0, 116.0], [58.1, 116.0], [58.2, 117.0], [58.3, 117.0], [58.4, 117.0], [58.5, 118.0], [58.6, 118.0], [58.7, 118.0], [58.8, 119.0], [58.9, 120.0], [59.0, 121.0], [59.1, 121.0], [59.2, 121.0], [59.3, 122.0], [59.4, 122.0], [59.5, 123.0], [59.6, 123.0], [59.7, 124.0], [59.8, 124.0], [59.9, 125.0], [60.0, 125.0], [60.1, 126.0], [60.2, 126.0], [60.3, 127.0], [60.4, 128.0], [60.5, 128.0], [60.6, 129.0], [60.7, 130.0], [60.8, 131.0], [60.9, 131.0], [61.0, 133.0], [61.1, 133.0], [61.2, 133.0], [61.3, 133.0], [61.4, 135.0], [61.5, 135.0], [61.6, 135.0], [61.7, 136.0], [61.8, 136.0], [61.9, 137.0], [62.0, 138.0], [62.1, 138.0], [62.2, 139.0], [62.3, 139.0], [62.4, 140.0], [62.5, 141.0], [62.6, 141.0], [62.7, 141.0], [62.8, 142.0], [62.9, 142.0], [63.0, 142.0], [63.1, 143.0], [63.2, 144.0], [63.3, 144.0], [63.4, 145.0], [63.5, 146.0], [63.6, 148.0], [63.7, 148.0], [63.8, 149.0], [63.9, 150.0], [64.0, 151.0], [64.1, 152.0], [64.2, 154.0], [64.3, 154.0], [64.4, 155.0], [64.5, 156.0], [64.6, 157.0], [64.7, 158.0], [64.8, 158.0], [64.9, 159.0], [65.0, 159.0], [65.1, 160.0], [65.2, 161.0], [65.3, 162.0], [65.4, 163.0], [65.5, 163.0], [65.6, 164.0], [65.7, 165.0], [65.8, 166.0], [65.9, 167.0], [66.0, 168.0], [66.1, 169.0], [66.2, 170.0], [66.3, 171.0], [66.4, 172.0], [66.5, 172.0], [66.6, 174.0], [66.7, 174.0], [66.8, 175.0], [66.9, 176.0], [67.0, 176.0], [67.1, 177.0], [67.2, 178.0], [67.3, 178.0], [67.4, 179.0], [67.5, 181.0], [67.6, 181.0], [67.7, 181.0], [67.8, 182.0], [67.9, 183.0], [68.0, 183.0], [68.1, 185.0], [68.2, 186.0], [68.3, 186.0], [68.4, 187.0], [68.5, 187.0], [68.6, 189.0], [68.7, 190.0], [68.8, 191.0], [68.9, 191.0], [69.0, 192.0], [69.1, 193.0], [69.2, 194.0], [69.3, 195.0], [69.4, 196.0], [69.5, 197.0], [69.6, 197.0], [69.7, 198.0], [69.8, 199.0], [69.9, 200.0], [70.0, 201.0], [70.1, 202.0], [70.2, 203.0], [70.3, 204.0], [70.4, 205.0], [70.5, 206.0], [70.6, 207.0], [70.7, 209.0], [70.8, 211.0], [70.9, 211.0], [71.0, 212.0], [71.1, 213.0], [71.2, 214.0], [71.3, 214.0], [71.4, 216.0], [71.5, 217.0], [71.6, 218.0], [71.7, 219.0], [71.8, 221.0], [71.9, 221.0], [72.0, 222.0], [72.1, 223.0], [72.2, 225.0], [72.3, 227.0], [72.4, 228.0], [72.5, 228.0], [72.6, 229.0], [72.7, 230.0], [72.8, 232.0], [72.9, 232.0], [73.0, 233.0], [73.1, 235.0], [73.2, 236.0], [73.3, 237.0], [73.4, 238.0], [73.5, 240.0], [73.6, 240.0], [73.7, 241.0], [73.8, 242.0], [73.9, 245.0], [74.0, 246.0], [74.1, 246.0], [74.2, 247.0], [74.3, 248.0], [74.4, 250.0], [74.5, 252.0], [74.6, 253.0], [74.7, 254.0], [74.8, 255.0], [74.9, 256.0], [75.0, 257.0], [75.1, 259.0], [75.2, 259.0], [75.3, 260.0], [75.4, 262.0], [75.5, 263.0], [75.6, 265.0], [75.7, 266.0], [75.8, 267.0], [75.9, 269.0], [76.0, 271.0], [76.1, 271.0], [76.2, 273.0], [76.3, 273.0], [76.4, 276.0], [76.5, 277.0], [76.6, 279.0], [76.7, 280.0], [76.8, 281.0], [76.9, 284.0], [77.0, 286.0], [77.1, 287.0], [77.2, 288.0], [77.3, 289.0], [77.4, 293.0], [77.5, 294.0], [77.6, 296.0], [77.7, 299.0], [77.8, 302.0], [77.9, 304.0], [78.0, 305.0], [78.1, 306.0], [78.2, 307.0], [78.3, 308.0], [78.4, 310.0], [78.5, 312.0], [78.6, 314.0], [78.7, 316.0], [78.8, 317.0], [78.9, 318.0], [79.0, 319.0], [79.1, 321.0], [79.2, 321.0], [79.3, 323.0], [79.4, 326.0], [79.5, 327.0], [79.6, 328.0], [79.7, 330.0], [79.8, 332.0], [79.9, 333.0], [80.0, 336.0], [80.1, 337.0], [80.2, 338.0], [80.3, 340.0], [80.4, 341.0], [80.5, 342.0], [80.6, 346.0], [80.7, 348.0], [80.8, 350.0], [80.9, 352.0], [81.0, 353.0], [81.1, 355.0], [81.2, 357.0], [81.3, 359.0], [81.4, 362.0], [81.5, 363.0], [81.6, 366.0], [81.7, 367.0], [81.8, 368.0], [81.9, 370.0], [82.0, 374.0], [82.1, 374.0], [82.2, 377.0], [82.3, 378.0], [82.4, 379.0], [82.5, 381.0], [82.6, 383.0], [82.7, 385.0], [82.8, 388.0], [82.9, 390.0], [83.0, 392.0], [83.1, 393.0], [83.2, 394.0], [83.3, 396.0], [83.4, 397.0], [83.5, 399.0], [83.6, 402.0], [83.7, 407.0], [83.8, 410.0], [83.9, 413.0], [84.0, 413.0], [84.1, 416.0], [84.2, 417.0], [84.3, 419.0], [84.4, 422.0], [84.5, 427.0], [84.6, 430.0], [84.7, 432.0], [84.8, 434.0], [84.9, 436.0], [85.0, 443.0], [85.1, 447.0], [85.2, 449.0], [85.3, 455.0], [85.4, 458.0], [85.5, 461.0], [85.6, 463.0], [85.7, 467.0], [85.8, 469.0], [85.9, 471.0], [86.0, 474.0], [86.1, 476.0], [86.2, 479.0], [86.3, 483.0], [86.4, 483.0], [86.5, 488.0], [86.6, 490.0], [86.7, 492.0], [86.8, 494.0], [86.9, 497.0], [87.0, 501.0], [87.1, 505.0], [87.2, 509.0], [87.3, 512.0], [87.4, 514.0], [87.5, 518.0], [87.6, 520.0], [87.7, 524.0], [87.8, 527.0], [87.9, 529.0], [88.0, 534.0], [88.1, 536.0], [88.2, 537.0], [88.3, 541.0], [88.4, 545.0], [88.5, 549.0], [88.6, 551.0], [88.7, 557.0], [88.8, 561.0], [88.9, 564.0], [89.0, 569.0], [89.1, 574.0], [89.2, 578.0], [89.3, 582.0], [89.4, 585.0], [89.5, 591.0], [89.6, 593.0], [89.7, 596.0], [89.8, 599.0], [89.9, 602.0], [90.0, 606.0], [90.1, 609.0], [90.2, 612.0], [90.3, 615.0], [90.4, 619.0], [90.5, 621.0], [90.6, 622.0], [90.7, 626.0], [90.8, 630.0], [90.9, 634.0], [91.0, 639.0], [91.1, 643.0], [91.2, 645.0], [91.3, 650.0], [91.4, 653.0], [91.5, 655.0], [91.6, 662.0], [91.7, 667.0], [91.8, 671.0], [91.9, 675.0], [92.0, 678.0], [92.1, 682.0], [92.2, 688.0], [92.3, 694.0], [92.4, 701.0], [92.5, 706.0], [92.6, 708.0], [92.7, 712.0], [92.8, 721.0], [92.9, 730.0], [93.0, 741.0], [93.1, 744.0], [93.2, 747.0], [93.3, 753.0], [93.4, 762.0], [93.5, 765.0], [93.6, 769.0], [93.7, 774.0], [93.8, 785.0], [93.9, 788.0], [94.0, 795.0], [94.1, 799.0], [94.2, 805.0], [94.3, 815.0], [94.4, 825.0], [94.5, 832.0], [94.6, 835.0], [94.7, 842.0], [94.8, 850.0], [94.9, 855.0], [95.0, 861.0], [95.1, 865.0], [95.2, 869.0], [95.3, 873.0], [95.4, 876.0], [95.5, 881.0], [95.6, 884.0], [95.7, 886.0], [95.8, 889.0], [95.9, 899.0], [96.0, 904.0], [96.1, 912.0], [96.2, 916.0], [96.3, 921.0], [96.4, 925.0], [96.5, 933.0], [96.6, 939.0], [96.7, 941.0], [96.8, 950.0], [96.9, 956.0], [97.0, 960.0], [97.1, 964.0], [97.2, 968.0], [97.3, 975.0], [97.4, 984.0], [97.5, 992.0], [97.6, 994.0], [97.7, 1001.0], [97.8, 1017.0], [97.9, 1021.0], [98.0, 1035.0], [98.1, 1048.0], [98.2, 1063.0], [98.3, 1071.0], [98.4, 1089.0], [98.5, 1101.0], [98.6, 1127.0], [98.7, 1175.0], [98.8, 1190.0], [98.9, 1216.0], [99.0, 1254.0], [99.1, 1275.0], [99.2, 1307.0], [99.3, 1325.0], [99.4, 1390.0], [99.5, 1428.0], [99.6, 1448.0], [99.7, 1488.0], [99.8, 1535.0], [99.9, 1592.0]], "isOverall": false, "label": "Obter Detalhes da Track Selecionada", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 3.0], [17.1, 3.0], [17.2, 3.0], [17.3, 3.0], [17.4, 3.0], [17.5, 3.0], [17.6, 3.0], [17.7, 4.0], [17.8, 4.0], [17.9, 4.0], [18.0, 4.0], [18.1, 5.0], [18.2, 5.0], [18.3, 5.0], [18.4, 5.0], [18.5, 5.0], [18.6, 5.0], [18.7, 5.0], [18.8, 5.0], [18.9, 5.0], [19.0, 6.0], [19.1, 6.0], [19.2, 6.0], [19.3, 6.0], [19.4, 6.0], [19.5, 6.0], [19.6, 6.0], [19.7, 6.0], [19.8, 6.0], [19.9, 6.0], [20.0, 6.0], [20.1, 6.0], [20.2, 6.0], [20.3, 6.0], [20.4, 6.0], [20.5, 6.0], [20.6, 6.0], [20.7, 6.0], [20.8, 6.0], [20.9, 6.0], [21.0, 6.0], [21.1, 6.0], [21.2, 6.0], [21.3, 6.0], [21.4, 7.0], [21.5, 7.0], [21.6, 7.0], [21.7, 7.0], [21.8, 7.0], [21.9, 7.0], [22.0, 7.0], [22.1, 7.0], [22.2, 7.0], [22.3, 7.0], [22.4, 7.0], [22.5, 7.0], [22.6, 7.0], [22.7, 7.0], [22.8, 7.0], [22.9, 7.0], [23.0, 7.0], [23.1, 7.0], [23.2, 7.0], [23.3, 7.0], [23.4, 7.0], [23.5, 7.0], [23.6, 7.0], [23.7, 7.0], [23.8, 8.0], [23.9, 8.0], [24.0, 8.0], [24.1, 8.0], [24.2, 8.0], [24.3, 8.0], [24.4, 8.0], [24.5, 8.0], [24.6, 8.0], [24.7, 8.0], [24.8, 8.0], [24.9, 8.0], [25.0, 8.0], [25.1, 8.0], [25.2, 8.0], [25.3, 8.0], [25.4, 8.0], [25.5, 8.0], [25.6, 8.0], [25.7, 8.0], [25.8, 8.0], [25.9, 8.0], [26.0, 8.0], [26.1, 8.0], [26.2, 8.0], [26.3, 8.0], [26.4, 8.0], [26.5, 8.0], [26.6, 8.0], [26.7, 8.0], [26.8, 8.0], [26.9, 8.0], [27.0, 9.0], [27.1, 9.0], [27.2, 9.0], [27.3, 9.0], [27.4, 9.0], [27.5, 9.0], [27.6, 9.0], [27.7, 9.0], [27.8, 9.0], [27.9, 9.0], [28.0, 9.0], [28.1, 9.0], [28.2, 9.0], [28.3, 9.0], [28.4, 9.0], [28.5, 9.0], [28.6, 9.0], [28.7, 9.0], [28.8, 9.0], [28.9, 9.0], [29.0, 9.0], [29.1, 9.0], [29.2, 10.0], [29.3, 10.0], [29.4, 10.0], [29.5, 10.0], [29.6, 10.0], [29.7, 10.0], [29.8, 10.0], [29.9, 10.0], [30.0, 10.0], [30.1, 10.0], [30.2, 10.0], [30.3, 10.0], [30.4, 10.0], [30.5, 10.0], [30.6, 10.0], [30.7, 10.0], [30.8, 10.0], [30.9, 10.0], [31.0, 11.0], [31.1, 11.0], [31.2, 11.0], [31.3, 11.0], [31.4, 11.0], [31.5, 11.0], [31.6, 11.0], [31.7, 11.0], [31.8, 11.0], [31.9, 11.0], [32.0, 11.0], [32.1, 12.0], [32.2, 12.0], [32.3, 12.0], [32.4, 12.0], [32.5, 12.0], [32.6, 12.0], [32.7, 12.0], [32.8, 12.0], [32.9, 12.0], [33.0, 12.0], [33.1, 13.0], [33.2, 13.0], [33.3, 13.0], [33.4, 13.0], [33.5, 13.0], [33.6, 13.0], [33.7, 13.0], [33.8, 13.0], [33.9, 14.0], [34.0, 14.0], [34.1, 14.0], [34.2, 14.0], [34.3, 14.0], [34.4, 14.0], [34.5, 14.0], [34.6, 15.0], [34.7, 15.0], [34.8, 15.0], [34.9, 15.0], [35.0, 16.0], [35.1, 16.0], [35.2, 16.0], [35.3, 16.0], [35.4, 16.0], [35.5, 16.0], [35.6, 17.0], [35.7, 17.0], [35.8, 17.0], [35.9, 17.0], [36.0, 17.0], [36.1, 17.0], [36.2, 18.0], [36.3, 18.0], [36.4, 18.0], [36.5, 18.0], [36.6, 18.0], [36.7, 18.0], [36.8, 19.0], [36.9, 19.0], [37.0, 19.0], [37.1, 19.0], [37.2, 19.0], [37.3, 19.0], [37.4, 19.0], [37.5, 20.0], [37.6, 20.0], [37.7, 20.0], [37.8, 20.0], [37.9, 21.0], [38.0, 21.0], [38.1, 21.0], [38.2, 21.0], [38.3, 21.0], [38.4, 21.0], [38.5, 21.0], [38.6, 22.0], [38.7, 22.0], [38.8, 22.0], [38.9, 22.0], [39.0, 22.0], [39.1, 23.0], [39.2, 23.0], [39.3, 23.0], [39.4, 23.0], [39.5, 23.0], [39.6, 23.0], [39.7, 24.0], [39.8, 24.0], [39.9, 24.0], [40.0, 24.0], [40.1, 24.0], [40.2, 24.0], [40.3, 25.0], [40.4, 25.0], [40.5, 25.0], [40.6, 25.0], [40.7, 25.0], [40.8, 25.0], [40.9, 26.0], [41.0, 26.0], [41.1, 26.0], [41.2, 26.0], [41.3, 26.0], [41.4, 27.0], [41.5, 27.0], [41.6, 27.0], [41.7, 27.0], [41.8, 27.0], [41.9, 27.0], [42.0, 27.0], [42.1, 28.0], [42.2, 28.0], [42.3, 28.0], [42.4, 28.0], [42.5, 28.0], [42.6, 28.0], [42.7, 29.0], [42.8, 29.0], [42.9, 29.0], [43.0, 29.0], [43.1, 30.0], [43.2, 30.0], [43.3, 30.0], [43.4, 30.0], [43.5, 30.0], [43.6, 30.0], [43.7, 30.0], [43.8, 31.0], [43.9, 31.0], [44.0, 31.0], [44.1, 31.0], [44.2, 32.0], [44.3, 32.0], [44.4, 32.0], [44.5, 32.0], [44.6, 32.0], [44.7, 33.0], [44.8, 33.0], [44.9, 33.0], [45.0, 33.0], [45.1, 33.0], [45.2, 33.0], [45.3, 33.0], [45.4, 34.0], [45.5, 34.0], [45.6, 34.0], [45.7, 34.0], [45.8, 34.0], [45.9, 34.0], [46.0, 35.0], [46.1, 35.0], [46.2, 35.0], [46.3, 35.0], [46.4, 36.0], [46.5, 36.0], [46.6, 36.0], [46.7, 36.0], [46.8, 36.0], [46.9, 36.0], [47.0, 37.0], [47.1, 37.0], [47.2, 37.0], [47.3, 37.0], [47.4, 37.0], [47.5, 37.0], [47.6, 38.0], [47.7, 38.0], [47.8, 38.0], [47.9, 38.0], [48.0, 38.0], [48.1, 39.0], [48.2, 39.0], [48.3, 39.0], [48.4, 40.0], [48.5, 40.0], [48.6, 40.0], [48.7, 41.0], [48.8, 41.0], [48.9, 41.0], [49.0, 42.0], [49.1, 42.0], [49.2, 42.0], [49.3, 43.0], [49.4, 43.0], [49.5, 43.0], [49.6, 44.0], [49.7, 44.0], [49.8, 44.0], [49.9, 45.0], [50.0, 45.0], [50.1, 45.0], [50.2, 45.0], [50.3, 45.0], [50.4, 46.0], [50.5, 46.0], [50.6, 46.0], [50.7, 46.0], [50.8, 47.0], [50.9, 47.0], [51.0, 47.0], [51.1, 48.0], [51.2, 48.0], [51.3, 49.0], [51.4, 49.0], [51.5, 49.0], [51.6, 49.0], [51.7, 50.0], [51.8, 50.0], [51.9, 50.0], [52.0, 50.0], [52.1, 51.0], [52.2, 51.0], [52.3, 51.0], [52.4, 52.0], [52.5, 52.0], [52.6, 52.0], [52.7, 52.0], [52.8, 53.0], [52.9, 53.0], [53.0, 53.0], [53.1, 54.0], [53.2, 54.0], [53.3, 54.0], [53.4, 54.0], [53.5, 55.0], [53.6, 55.0], [53.7, 55.0], [53.8, 55.0], [53.9, 56.0], [54.0, 56.0], [54.1, 56.0], [54.2, 57.0], [54.3, 57.0], [54.4, 57.0], [54.5, 58.0], [54.6, 58.0], [54.7, 58.0], [54.8, 59.0], [54.9, 59.0], [55.0, 59.0], [55.1, 60.0], [55.2, 60.0], [55.3, 61.0], [55.4, 61.0], [55.5, 61.0], [55.6, 61.0], [55.7, 62.0], [55.8, 62.0], [55.9, 63.0], [56.0, 63.0], [56.1, 63.0], [56.2, 64.0], [56.3, 64.0], [56.4, 64.0], [56.5, 65.0], [56.6, 65.0], [56.7, 66.0], [56.8, 66.0], [56.9, 66.0], [57.0, 66.0], [57.1, 67.0], [57.2, 67.0], [57.3, 68.0], [57.4, 68.0], [57.5, 68.0], [57.6, 68.0], [57.7, 69.0], [57.8, 69.0], [57.9, 70.0], [58.0, 70.0], [58.1, 71.0], [58.2, 71.0], [58.3, 71.0], [58.4, 72.0], [58.5, 72.0], [58.6, 73.0], [58.7, 73.0], [58.8, 73.0], [58.9, 73.0], [59.0, 74.0], [59.1, 74.0], [59.2, 75.0], [59.3, 75.0], [59.4, 76.0], [59.5, 76.0], [59.6, 77.0], [59.7, 77.0], [59.8, 78.0], [59.9, 78.0], [60.0, 79.0], [60.1, 79.0], [60.2, 80.0], [60.3, 80.0], [60.4, 81.0], [60.5, 81.0], [60.6, 81.0], [60.7, 82.0], [60.8, 82.0], [60.9, 82.0], [61.0, 83.0], [61.1, 83.0], [61.2, 83.0], [61.3, 84.0], [61.4, 84.0], [61.5, 85.0], [61.6, 85.0], [61.7, 86.0], [61.8, 86.0], [61.9, 87.0], [62.0, 87.0], [62.1, 88.0], [62.2, 89.0], [62.3, 89.0], [62.4, 90.0], [62.5, 91.0], [62.6, 91.0], [62.7, 92.0], [62.8, 92.0], [62.9, 93.0], [63.0, 93.0], [63.1, 94.0], [63.2, 95.0], [63.3, 96.0], [63.4, 96.0], [63.5, 97.0], [63.6, 97.0], [63.7, 98.0], [63.8, 98.0], [63.9, 98.0], [64.0, 99.0], [64.1, 99.0], [64.2, 99.0], [64.3, 99.0], [64.4, 100.0], [64.5, 100.0], [64.6, 101.0], [64.7, 102.0], [64.8, 102.0], [64.9, 103.0], [65.0, 104.0], [65.1, 104.0], [65.2, 105.0], [65.3, 106.0], [65.4, 106.0], [65.5, 107.0], [65.6, 107.0], [65.7, 108.0], [65.8, 110.0], [65.9, 110.0], [66.0, 111.0], [66.1, 111.0], [66.2, 112.0], [66.3, 113.0], [66.4, 113.0], [66.5, 114.0], [66.6, 114.0], [66.7, 115.0], [66.8, 115.0], [66.9, 116.0], [67.0, 116.0], [67.1, 116.0], [67.2, 116.0], [67.3, 116.0], [67.4, 117.0], [67.5, 117.0], [67.6, 118.0], [67.7, 119.0], [67.8, 119.0], [67.9, 120.0], [68.0, 120.0], [68.1, 121.0], [68.2, 121.0], [68.3, 122.0], [68.4, 122.0], [68.5, 123.0], [68.6, 123.0], [68.7, 124.0], [68.8, 124.0], [68.9, 125.0], [69.0, 125.0], [69.1, 127.0], [69.2, 127.0], [69.3, 128.0], [69.4, 128.0], [69.5, 129.0], [69.6, 130.0], [69.7, 131.0], [69.8, 132.0], [69.9, 133.0], [70.0, 134.0], [70.1, 135.0], [70.2, 136.0], [70.3, 137.0], [70.4, 138.0], [70.5, 139.0], [70.6, 139.0], [70.7, 140.0], [70.8, 140.0], [70.9, 141.0], [71.0, 142.0], [71.1, 142.0], [71.2, 143.0], [71.3, 143.0], [71.4, 144.0], [71.5, 144.0], [71.6, 145.0], [71.7, 145.0], [71.8, 146.0], [71.9, 147.0], [72.0, 149.0], [72.1, 149.0], [72.2, 151.0], [72.3, 151.0], [72.4, 153.0], [72.5, 154.0], [72.6, 155.0], [72.7, 156.0], [72.8, 156.0], [72.9, 158.0], [73.0, 159.0], [73.1, 160.0], [73.2, 161.0], [73.3, 162.0], [73.4, 163.0], [73.5, 163.0], [73.6, 164.0], [73.7, 164.0], [73.8, 165.0], [73.9, 166.0], [74.0, 167.0], [74.1, 168.0], [74.2, 168.0], [74.3, 169.0], [74.4, 170.0], [74.5, 170.0], [74.6, 171.0], [74.7, 172.0], [74.8, 173.0], [74.9, 173.0], [75.0, 174.0], [75.1, 174.0], [75.2, 175.0], [75.3, 176.0], [75.4, 177.0], [75.5, 178.0], [75.6, 179.0], [75.7, 180.0], [75.8, 181.0], [75.9, 181.0], [76.0, 183.0], [76.1, 184.0], [76.2, 185.0], [76.3, 186.0], [76.4, 187.0], [76.5, 188.0], [76.6, 189.0], [76.7, 191.0], [76.8, 192.0], [76.9, 192.0], [77.0, 193.0], [77.1, 194.0], [77.2, 195.0], [77.3, 195.0], [77.4, 196.0], [77.5, 197.0], [77.6, 198.0], [77.7, 199.0], [77.8, 200.0], [77.9, 202.0], [78.0, 202.0], [78.1, 203.0], [78.2, 204.0], [78.3, 205.0], [78.4, 205.0], [78.5, 207.0], [78.6, 208.0], [78.7, 210.0], [78.8, 211.0], [78.9, 211.0], [79.0, 213.0], [79.1, 214.0], [79.2, 215.0], [79.3, 216.0], [79.4, 217.0], [79.5, 218.0], [79.6, 220.0], [79.7, 222.0], [79.8, 223.0], [79.9, 224.0], [80.0, 225.0], [80.1, 226.0], [80.2, 227.0], [80.3, 228.0], [80.4, 230.0], [80.5, 232.0], [80.6, 233.0], [80.7, 235.0], [80.8, 237.0], [80.9, 238.0], [81.0, 239.0], [81.1, 241.0], [81.2, 243.0], [81.3, 244.0], [81.4, 244.0], [81.5, 246.0], [81.6, 247.0], [81.7, 248.0], [81.8, 250.0], [81.9, 251.0], [82.0, 255.0], [82.1, 257.0], [82.2, 258.0], [82.3, 259.0], [82.4, 260.0], [82.5, 261.0], [82.6, 263.0], [82.7, 265.0], [82.8, 267.0], [82.9, 269.0], [83.0, 270.0], [83.1, 272.0], [83.2, 275.0], [83.3, 276.0], [83.4, 278.0], [83.5, 281.0], [83.6, 281.0], [83.7, 283.0], [83.8, 285.0], [83.9, 287.0], [84.0, 288.0], [84.1, 290.0], [84.2, 291.0], [84.3, 293.0], [84.4, 294.0], [84.5, 296.0], [84.6, 296.0], [84.7, 299.0], [84.8, 300.0], [84.9, 305.0], [85.0, 306.0], [85.1, 309.0], [85.2, 311.0], [85.3, 313.0], [85.4, 315.0], [85.5, 317.0], [85.6, 320.0], [85.7, 323.0], [85.8, 324.0], [85.9, 327.0], [86.0, 329.0], [86.1, 332.0], [86.2, 333.0], [86.3, 335.0], [86.4, 337.0], [86.5, 339.0], [86.6, 341.0], [86.7, 342.0], [86.8, 344.0], [86.9, 349.0], [87.0, 350.0], [87.1, 353.0], [87.2, 355.0], [87.3, 358.0], [87.4, 360.0], [87.5, 362.0], [87.6, 363.0], [87.7, 365.0], [87.8, 366.0], [87.9, 370.0], [88.0, 371.0], [88.1, 373.0], [88.2, 377.0], [88.3, 378.0], [88.4, 381.0], [88.5, 383.0], [88.6, 386.0], [88.7, 388.0], [88.8, 389.0], [88.9, 393.0], [89.0, 397.0], [89.1, 403.0], [89.2, 407.0], [89.3, 409.0], [89.4, 414.0], [89.5, 416.0], [89.6, 417.0], [89.7, 420.0], [89.8, 423.0], [89.9, 427.0], [90.0, 431.0], [90.1, 434.0], [90.2, 436.0], [90.3, 439.0], [90.4, 442.0], [90.5, 446.0], [90.6, 452.0], [90.7, 458.0], [90.8, 461.0], [90.9, 465.0], [91.0, 468.0], [91.1, 469.0], [91.2, 473.0], [91.3, 484.0], [91.4, 493.0], [91.5, 501.0], [91.6, 509.0], [91.7, 514.0], [91.8, 516.0], [91.9, 525.0], [92.0, 527.0], [92.1, 534.0], [92.2, 541.0], [92.3, 542.0], [92.4, 548.0], [92.5, 557.0], [92.6, 560.0], [92.7, 570.0], [92.8, 571.0], [92.9, 575.0], [93.0, 587.0], [93.1, 591.0], [93.2, 599.0], [93.3, 609.0], [93.4, 618.0], [93.5, 628.0], [93.6, 639.0], [93.7, 644.0], [93.8, 649.0], [93.9, 663.0], [94.0, 669.0], [94.1, 679.0], [94.2, 689.0], [94.3, 694.0], [94.4, 702.0], [94.5, 707.0], [94.6, 716.0], [94.7, 722.0], [94.8, 726.0], [94.9, 735.0], [95.0, 747.0], [95.1, 754.0], [95.2, 757.0], [95.3, 761.0], [95.4, 774.0], [95.5, 778.0], [95.6, 782.0], [95.7, 787.0], [95.8, 798.0], [95.9, 809.0], [96.0, 821.0], [96.1, 831.0], [96.2, 850.0], [96.3, 855.0], [96.4, 866.0], [96.5, 872.0], [96.6, 881.0], [96.7, 888.0], [96.8, 891.0], [96.9, 897.0], [97.0, 899.0], [97.1, 904.0], [97.2, 916.0], [97.3, 926.0], [97.4, 940.0], [97.5, 945.0], [97.6, 953.0], [97.7, 964.0], [97.8, 972.0], [97.9, 981.0], [98.0, 990.0], [98.1, 995.0], [98.2, 1000.0], [98.3, 1007.0], [98.4, 1012.0], [98.5, 1029.0], [98.6, 1042.0], [98.7, 1056.0], [98.8, 1081.0], [98.9, 1099.0], [99.0, 1121.0], [99.1, 1142.0], [99.2, 1149.0], [99.3, 1184.0], [99.4, 1226.0], [99.5, 1281.0], [99.6, 1325.0], [99.7, 1415.0], [99.8, 1551.0], [99.9, 1631.0]], "isOverall": false, "label": "Listar Pistas", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 3216.0, "series": [{"data": [[0.0, 2745.0], [600.0, 128.0], [700.0, 87.0], [200.0, 392.0], [800.0, 90.0], [900.0, 87.0], [1000.0, 40.0], [1100.0, 19.0], [300.0, 289.0], [1200.0, 17.0], [1300.0, 13.0], [1400.0, 14.0], [1500.0, 10.0], [100.0, 749.0], [400.0, 172.0], [1600.0, 4.0], [500.0, 144.0]], "isOverall": false, "label": "Obter Detalhes da Track Selecionada", "isController": false}, {"data": [[0.0, 3216.0], [600.0, 57.0], [700.0, 73.0], [200.0, 350.0], [800.0, 60.0], [900.0, 59.0], [1000.0, 36.0], [1100.0, 22.0], [300.0, 213.0], [1200.0, 11.0], [1300.0, 6.0], [1400.0, 3.0], [1500.0, 6.0], [100.0, 672.0], [400.0, 121.0], [1600.0, 4.0], [1700.0, 2.0], [500.0, 89.0]], "isOverall": false, "label": "Listar Pistas", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 14.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6813.0, "series": [{"data": [[0.0, 6813.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 693.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 14.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2480.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 379.7061000000004, "minX": 1.75003224E12, "maxY": 379.7061000000004, "series": [{"data": [[1.75003224E12, 379.7061000000004]], "isOverall": false, "label": "NoAuth", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75003224E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 966.0, "series": [{"data": [[2.0, 12.0], [3.0, 24.0], [4.0, 27.0], [5.0, 29.0], [6.0, 6.0], [8.0, 5.0], [9.0, 5.0], [10.0, 6.0], [11.0, 7.0], [12.0, 6.0], [13.0, 7.0], [14.0, 6.0], [15.0, 6.0], [16.0, 6.0], [17.0, 5.0], [18.0, 6.0], [19.0, 5.5], [20.0, 7.0], [21.0, 7.0], [22.0, 8.0], [24.0, 7.5], [25.0, 7.0], [26.0, 7.0], [28.0, 10.5], [29.0, 7.0], [30.0, 7.0], [31.0, 6.0], [33.0, 7.0], [35.0, 6.0], [34.0, 6.0], [37.0, 8.666666666666666], [36.0, 5.0], [39.0, 8.0], [38.0, 10.0], [41.0, 7.0], [40.0, 7.0], [42.0, 6.0], [45.0, 10.0], [44.0, 8.0], [47.0, 10.0], [49.0, 8.0], [48.0, 9.0], [51.0, 12.0], [50.0, 10.5], [53.0, 13.0], [52.0, 10.0], [55.0, 7.0], [54.0, 10.0], [57.0, 5.0], [56.0, 5.333333333333333], [59.0, 6.0], [58.0, 5.0], [61.0, 6.0], [60.0, 6.0], [63.0, 5.0], [67.0, 5.0], [66.0, 5.5], [64.0, 5.5], [71.0, 5.0], [70.0, 6.0], [69.0, 9.0], [68.0, 5.0], [75.0, 5.5], [74.0, 5.0], [72.0, 5.0], [79.0, 6.0], [78.0, 5.5], [76.0, 7.0], [82.0, 6.0], [81.0, 5.0], [80.0, 6.0], [87.0, 7.0], [86.0, 6.0], [85.0, 6.0], [91.0, 7.5], [89.0, 10.0], [88.0, 7.5], [95.0, 6.5], [94.0, 9.666666666666666], [93.0, 5.5], [92.0, 6.0], [98.0, 7.0], [97.0, 6.0], [96.0, 5.5], [102.0, 5.5], [101.0, 5.0], [107.0, 7.0], [106.0, 6.0], [105.0, 6.0], [104.0, 5.0], [110.0, 6.5], [109.0, 6.166666666666667], [115.0, 6.0], [114.0, 5.0], [113.0, 6.0], [112.0, 7.0], [119.0, 5.571428571428571], [118.0, 5.0], [117.0, 7.0], [116.0, 6.0], [123.0, 6.333333333333333], [122.0, 5.0], [121.0, 6.0], [120.0, 6.0], [127.0, 5.0], [126.0, 5.0], [125.0, 5.25], [124.0, 6.0], [135.0, 6.0], [134.0, 6.0], [133.0, 6.666666666666667], [132.0, 5.5], [130.0, 5.0], [129.0, 5.0], [128.0, 5.0], [142.0, 8.5], [141.0, 7.0], [140.0, 8.0], [139.0, 5.5], [138.0, 6.0], [137.0, 5.0], [151.0, 7.0], [150.0, 8.5], [149.0, 6.666666666666667], [148.0, 8.0], [147.0, 9.5], [146.0, 8.666666666666666], [145.0, 8.25], [144.0, 5.8], [159.0, 18.0], [158.0, 23.666666666666668], [157.0, 16.5], [156.0, 16.0], [155.0, 15.5], [153.0, 11.666666666666666], [152.0, 8.714285714285714], [162.0, 18.5], [164.0, 43.125], [165.0, 36.40000000000001], [166.0, 34.04], [167.0, 63.8888888888889], [163.0, 11.0], [161.0, 19.6], [160.0, 11.5], [168.0, 54.4], [169.0, 66.4], [170.0, 12.615384615384615], [171.0, 11.0], [172.0, 8.470588235294118], [173.0, 7.666666666666666], [174.0, 8.0], [175.0, 7.0], [176.0, 7.999999999999999], [177.0, 10.75], [178.0, 8.75], [179.0, 8.0], [180.0, 7.5], [182.0, 7.0], [183.0, 8.4], [181.0, 11.0], [184.0, 7.5], [185.0, 7.666666666666667], [186.0, 11.0], [188.0, 7.2], [190.0, 9.0], [191.0, 9.8], [189.0, 11.5], [187.0, 9.8], [192.0, 7.571428571428571], [193.0, 8.666666666666666], [194.0, 8.875], [196.0, 12.142857142857144], [197.0, 8.333333333333334], [198.0, 7.0], [199.0, 8.0], [195.0, 9.142857142857144], [200.0, 14.2], [201.0, 9.333333333333334], [202.0, 13.75], [203.0, 9.333333333333334], [205.0, 9.0], [207.0, 7.800000000000001], [206.0, 9.333333333333334], [204.0, 18.0], [208.0, 8.5], [209.0, 8.8], [210.0, 12.466666666666669], [212.0, 23.333333333333332], [213.0, 18.0], [214.0, 18.333333333333332], [215.0, 23.125000000000004], [211.0, 22.0], [216.0, 55.375], [217.0, 54.0], [218.0, 31.2], [219.0, 43.2], [220.0, 57.125], [221.0, 43.5], [223.0, 46.8], [222.0, 34.0], [224.0, 29.0], [225.0, 105.95652173913044], [227.0, 85.71428571428571], [228.0, 86.33333333333333], [229.0, 106.8], [230.0, 125.71428571428571], [231.0, 219.5], [226.0, 49.75], [232.0, 102.63636363636364], [233.0, 119.11111111111111], [234.0, 146.4], [235.0, 93.66666666666667], [236.0, 143.6923076923077], [237.0, 200.6], [238.0, 126.41666666666664], [239.0, 159.9090909090909], [240.0, 282.0], [241.0, 208.0], [242.0, 84.41176470588235], [243.0, 88.25], [244.0, 68.875], [245.0, 106.6875], [247.0, 14.25], [246.0, 11.75], [248.0, 51.05263157894737], [249.0, 109.38461538461539], [250.0, 23.625], [251.0, 25.4], [252.0, 41.0], [253.0, 16.6], [254.0, 21.545454545454547], [255.0, 34.0], [257.0, 17.77777777777778], [256.0, 17.875], [258.0, 8.75], [259.0, 12.6], [260.0, 10.428571428571429], [261.0, 10.88888888888889], [262.0, 12.333333333333334], [263.0, 7.625], [264.0, 8.82608695652174], [270.0, 11.0], [271.0, 20.5], [268.0, 12.833333333333334], [269.0, 20.57142857142857], [265.0, 9.75], [266.0, 9.5], [267.0, 10.857142857142858], [273.0, 11.4], [272.0, 14.833333333333334], [274.0, 18.6], [275.0, 11.142857142857142], [276.0, 13.076923076923077], [277.0, 8.0], [278.0, 12.777777777777779], [279.0, 19.099999999999998], [280.0, 53.0], [286.0, 35.0], [287.0, 53.111111111111114], [284.0, 28.22222222222222], [285.0, 46.21052631578948], [281.0, 44.2], [282.0, 35.45454545454545], [283.0, 27.666666666666668], [289.0, 48.85714285714286], [288.0, 63.75], [290.0, 53.142857142857146], [291.0, 86.77777777777777], [292.0, 114.66666666666666], [293.0, 67.66666666666667], [294.0, 117.2], [295.0, 52.666666666666664], [296.0, 105.33333333333334], [303.0, 112.51851851851849], [301.0, 142.06666666666666], [300.0, 113.88888888888889], [302.0, 116.75], [297.0, 104.625], [298.0, 103.8], [299.0, 124.75], [305.0, 90.38461538461537], [304.0, 94.88888888888889], [306.0, 102.25], [307.0, 72.69999999999999], [308.0, 70.89999999999999], [309.0, 278.4], [310.0, 226.4], [311.0, 120.66666666666666], [312.0, 106.4], [318.0, 125.04000000000002], [319.0, 137.875], [316.0, 99.85714285714286], [317.0, 144.86363636363637], [313.0, 141.7857142857143], [314.0, 218.00000000000003], [315.0, 97.96666666666668], [321.0, 106.64285714285714], [320.0, 107.625], [322.0, 120.7], [323.0, 145.8846153846154], [324.0, 101.7], [325.0, 79.2], [326.0, 93.85714285714286], [327.0, 78.0], [328.0, 103.64705882352939], [334.0, 26.363636363636363], [335.0, 19.46153846153846], [332.0, 49.72727272727273], [333.0, 31.476190476190474], [329.0, 87.66666666666667], [330.0, 114.8], [331.0, 51.58823529411764], [337.0, 26.25], [336.0, 28.5], [338.0, 20.0], [339.0, 30.555555555555557], [340.0, 29.8], [341.0, 36.0], [342.0, 38.909090909090914], [343.0, 31.647058823529413], [344.0, 21.333333333333332], [350.0, 37.25], [351.0, 63.76923076923077], [348.0, 31.666666666666668], [349.0, 27.6], [345.0, 25.105263157894733], [346.0, 30.4], [347.0, 22.8], [353.0, 67.66666666666667], [352.0, 72.99999999999999], [354.0, 62.2], [355.0, 64.0], [356.0, 79.91666666666666], [357.0, 76.42857142857143], [358.0, 51.6], [359.0, 158.33333333333334], [363.0, 88.33333333333333], [362.0, 43.25], [361.0, 168.5], [360.0, 45.0], [366.0, 175.71428571428572], [367.0, 318.1666666666667], [364.0, 179.0], [365.0, 67.66666666666667], [381.0, 370.5], [369.0, 145.55555555555554], [368.0, 119.66666666666666], [371.0, 336.0], [370.0, 177.0], [380.0, 694.75], [382.0, 404.125], [383.0, 237.0909090909091], [374.0, 222.2], [373.0, 600.5], [372.0, 38.5], [375.0, 291.4666666666667], [376.0, 285.2], [377.0, 151.54545454545456], [378.0, 338.75], [379.0, 421.0], [397.0, 539.6363636363636], [386.0, 280.3], [387.0, 278.61538461538464], [396.0, 322.3333333333333], [388.0, 145.0], [389.0, 263.45454545454544], [391.0, 179.33333333333334], [385.0, 269.25], [384.0, 224.66666666666666], [390.0, 218.0], [392.0, 400.0], [394.0, 266.0909090909091], [393.0, 358.0], [395.0, 354.25], [399.0, 282.4], [398.0, 476.40000000000003], [402.0, 590.5], [415.0, 721.3076923076923], [414.0, 562.7142857142858], [411.0, 547.5000000000001], [410.0, 796.1428571428572], [409.0, 453.75], [406.0, 452.3333333333333], [405.0, 549.1666666666666], [404.0, 634.75], [401.0, 645.4545454545454], [400.0, 801.8], [417.0, 572.1111111111111], [416.0, 531.95], [418.0, 638.2], [419.0, 616.5999999999999], [420.0, 547.3076923076924], [421.0, 514.736842105263], [422.0, 608.2857142857142], [423.0, 415.6000000000001], [424.0, 506.66666666666674], [429.0, 313.90909090909093], [428.0, 672.6666666666666], [430.0, 915.0], [431.0, 378.2], [425.0, 643.8], [426.0, 747.8333333333334], [427.0, 462.2], [434.0, 488.8], [433.0, 359.5333333333333], [435.0, 485.66666666666674], [444.0, 672.0526315789473], [445.0, 184.5], [446.0, 441.81249999999994], [447.0, 345.15000000000003], [437.0, 453.72727272727275], [436.0, 966.0], [438.0, 652.75], [439.0, 359.92857142857144], [432.0, 848.0000000000001], [440.0, 217.0], [441.0, 398.53846153846155], [442.0, 552.5714285714287], [443.0, 386.36842105263156], [449.0, 286.7368421052632], [448.0, 316.12500000000006], [450.0, 172.70833333333334], [451.0, 199.86666666666665], [452.0, 212.49999999999997], [453.0, 327.0], [454.0, 237.3], [455.0, 213.5], [456.0, 120.30000000000001], [462.0, 174.75000000000003], [463.0, 6.0], [460.0, 89.46666666666667], [461.0, 137.45454545454547], [457.0, 55.111111111111114], [458.0, 111.45454545454544], [459.0, 83.2], [466.0, 31.666666666666668], [464.0, 10.0], [465.0, 338.3636363636364], [467.0, 89.0], [476.0, 65.33333333333333], [477.0, 118.0], [479.0, 113.4375], [478.0, 136.4], [468.0, 117.2], [469.0, 69.0], [470.0, 57.875], [471.0, 193.5], [472.0, 192.66666666666666], [473.0, 55.0], [474.0, 106.0], [475.0, 123.8], [481.0, 165.18181818181816], [480.0, 277.84615384615387], [482.0, 194.14285714285714], [483.0, 224.625], [484.0, 145.5], [485.0, 203.11111111111111], [486.0, 175.3157894736842], [487.0, 162.0], [488.0, 151.0], [494.0, 130.14285714285714], [495.0, 166.73333333333332], [492.0, 135.52631578947373], [493.0, 130.18181818181816], [489.0, 135.41860465116284], [491.0, 157.54545454545456], [490.0, 137.75], [496.0, 90.08928571428574], [497.0, 112.84313725490195], [498.0, 204.18348623853208], [500.0, 312.8660251665435], [499.0, 196.61904761904762], [1.0, 11.0]], "isOverall": false, "label": "Obter Detalhes da Track Selecionada", "isController": false}, {"data": [[380.0362000000004, 202.2141999999997]], "isOverall": false, "label": "Obter Detalhes da Track Selecionada-Aggregated", "isController": false}, {"data": [[2.0, 10.0], [4.0, 24.0], [5.0, 21.5], [6.0, 6.0], [8.0, 5.0], [9.0, 6.0], [10.0, 6.0], [11.0, 6.0], [12.0, 7.0], [14.0, 6.0], [15.0, 6.0], [16.0, 6.0], [17.0, 5.0], [19.0, 7.666666666666667], [20.0, 8.0], [21.0, 7.0], [22.0, 6.0], [24.0, 9.0], [25.0, 7.5], [28.0, 9.666666666666666], [29.0, 7.0], [30.0, 7.0], [31.0, 6.0], [35.0, 5.0], [34.0, 7.0], [37.0, 10.0], [36.0, 5.0], [39.0, 8.0], [38.0, 8.5], [41.0, 6.0], [40.0, 6.0], [42.0, 6.0], [45.0, 10.0], [44.0, 7.0], [47.0, 9.2], [48.0, 1.0], [50.0, 0.0], [52.0, 10.0], [55.0, 5.5], [54.0, 8.8], [56.0, 6.0], [58.0, 3.0], [61.0, 6.0], [63.0, 5.0], [67.0, 5.0], [66.0, 5.5], [64.0, 3.5], [70.0, 91.23809523809526], [71.0, 11.333333333333334], [68.0, 6.0], [74.0, 6.333333333333333], [75.0, 8.333333333333334], [72.0, 7.0], [73.0, 10.0], [76.0, 11.0], [77.0, 11.0], [78.0, 7.166666666666667], [79.0, 10.0], [80.0, 7.25], [81.0, 10.0], [82.0, 6.5], [83.0, 9.0], [84.0, 9.0], [85.0, 6.25], [87.0, 8.666666666666666], [86.0, 7.0], [88.0, 7.75], [89.0, 7.0], [90.0, 10.0], [91.0, 9.0], [92.0, 6.777777777777778], [93.0, 6.666666666666667], [94.0, 8.0], [95.0, 6.0], [96.0, 7.0], [97.0, 5.25], [98.0, 7.2], [99.0, 8.0], [100.0, 9.0], [101.0, 5.6], [102.0, 7.0], [104.0, 8.25], [105.0, 7.0], [106.0, 7.333333333333333], [107.0, 8.0], [108.0, 8.0], [109.0, 6.25], [110.0, 9.0], [111.0, 11.0], [112.0, 7.0], [113.0, 6.4], [114.0, 8.0], [115.0, 9.0], [116.0, 7.2], [117.0, 5.0], [118.0, 10.0], [119.0, 5.222222222222222], [120.0, 9.0], [121.0, 8.0], [122.0, 6.5], [123.0, 7.333333333333333], [124.0, 6.0], [125.0, 6.0], [126.0, 8.0], [127.0, 6.166666666666667], [128.0, 7.5], [129.0, 7.333333333333333], [130.0, 9.0], [131.0, 10.0], [132.0, 7.5], [133.0, 10.0], [134.0, 6.8], [135.0, 6.166666666666667], [136.0, 9.0], [137.0, 7.0], [138.0, 11.0], [139.0, 7.2], [140.0, 8.5], [141.0, 9.0], [142.0, 10.0], [143.0, 9.0], [144.0, 6.625], [145.0, 8.666666666666666], [146.0, 8.6], [147.0, 10.0], [148.0, 8.6], [149.0, 8.25], [150.0, 9.333333333333334], [151.0, 7.0], [152.0, 10.571428571428571], [154.0, 19.0], [155.0, 10.333333333333334], [156.0, 18.0], [157.0, 15.333333333333334], [158.0, 18.0], [159.0, 14.333333333333334], [153.0, 14.166666666666666], [160.0, 21.0], [162.0, 19.25], [167.0, 8.166666666666666], [166.0, 17.0], [165.0, 11.0], [163.0, 13.0], [161.0, 15.5], [168.0, 36.66666666666667], [169.0, 93.66666666666666], [170.0, 13.642857142857142], [171.0, 11.0], [172.0, 7.687499999999999], [173.0, 8.4], [174.0, 8.142857142857142], [175.0, 9.0], [176.0, 9.4], [177.0, 11.666666666666668], [178.0, 9.333333333333334], [179.0, 10.666666666666666], [180.0, 10.666666666666666], [181.0, 9.0], [182.0, 9.0], [183.0, 7.7142857142857135], [184.0, 9.5], [185.0, 12.333333333333334], [186.0, 9.0], [187.0, 10.125], [188.0, 8.0], [189.0, 11.25], [190.0, 11.333333333333334], [191.0, 9.75], [192.0, 7.846153846153846], [193.0, 10.0], [194.0, 9.571428571428571], [195.0, 7.285714285714286], [196.0, 9.0], [197.0, 9.5], [198.0, 9.0], [199.0, 8.333333333333334], [200.0, 15.5], [201.0, 13.75], [202.0, 10.0], [203.0, 8.0], [204.0, 7.666666666666666], [205.0, 8.0], [206.0, 7.714285714285714], [207.0, 7.76923076923077], [208.0, 8.0], [209.0, 8.0], [210.0, 15.636363636363635], [211.0, 23.4], [212.0, 4.833333333333333], [213.0, 23.5], [214.0, 4.066666666666666], [215.0, 26.22222222222222], [216.0, 29.0], [217.0, 39.25], [218.0, 25.416666666666664], [219.0, 48.800000000000004], [220.0, 58.99999999999999], [221.0, 89.50000000000001], [223.0, 88.2], [222.0, 34.0], [224.0, 156.8], [225.0, 122.63636363636364], [226.0, 104.79999999999998], [227.0, 171.5], [228.0, 129.8], [229.0, 116.66666666666667], [230.0, 67.5], [231.0, 246.66666666666666], [232.0, 260.2], [233.0, 174.49999999999997], [234.0, 104.0], [235.0, 169.90909090909088], [236.0, 66.0], [237.0, 181.0], [238.0, 87.14285714285714], [239.0, 104.8], [240.0, 187.66666666666666], [241.0, 121.0], [242.0, 43.85714285714286], [243.0, 129.33333333333331], [244.0, 51.375], [245.0, 99.25], [246.0, 50.875], [247.0, 14.0], [248.0, 23.93333333333334], [249.0, 28.333333333333332], [250.0, 26.6], [251.0, 18.5], [252.0, 39.5], [253.0, 16.0], [254.0, 23.999999999999996], [255.0, 35.0], [257.0, 17.923076923076923], [256.0, 27.000000000000004], [258.0, 9.0], [259.0, 6.5], [260.0, 9.88888888888889], [261.0, 9.666666666666666], [262.0, 10.0], [263.0, 8.4], [264.0, 8.157894736842104], [270.0, 7.285714285714286], [271.0, 31.25], [268.0, 12.5], [269.0, 10.375], [265.0, 9.5], [266.0, 7.875], [267.0, 10.444444444444445], [273.0, 11.249999999999998], [272.0, 10.714285714285714], [274.0, 11.666666666666668], [275.0, 15.249999999999996], [276.0, 8.727272727272728], [277.0, 17.166666666666664], [278.0, 9.100000000000001], [279.0, 35.0], [280.0, 57.25], [286.0, 55.375], [287.0, 55.46666666666667], [284.0, 54.36363636363636], [285.0, 49.82352941176471], [281.0, 35.33333333333332], [282.0, 54.4], [283.0, 51.333333333333336], [289.0, 44.99999999999999], [288.0, 56.75], [290.0, 49.75], [291.0, 76.0], [292.0, 108.16666666666666], [293.0, 123.44444444444444], [294.0, 116.33333333333333], [295.0, 159.0], [296.0, 101.99999999999999], [303.0, 104.71428571428572], [301.0, 112.80952380952382], [300.0, 104.5], [302.0, 114.0], [297.0, 132.375], [298.0, 142.33333333333334], [299.0, 95.2], [305.0, 72.23076923076923], [304.0, 74.66666666666667], [307.0, 52.14285714285714], [306.0, 93.0], [316.0, 171.33333333333334], [317.0, 109.70588235294116], [318.0, 132.72413793103448], [319.0, 186.8], [308.0, 126.4], [309.0, 171.4], [310.0, 200.14285714285714], [311.0, 105.2], [312.0, 88.39999999999999], [313.0, 113.53846153846155], [314.0, 184.7142857142857], [315.0, 130.16666666666669], [321.0, 199.91666666666669], [320.0, 109.33333333333334], [322.0, 99.14285714285714], [323.0, 130.82608695652175], [324.0, 72.0], [325.0, 64.2], [326.0, 96.55000000000001], [327.0, 176.33333333333334], [328.0, 58.46666666666667], [334.0, 17.5], [335.0, 28.90909090909091], [332.0, 36.714285714285715], [333.0, 28.166666666666664], [329.0, 56.0], [330.0, 104.375], [331.0, 46.611111111111114], [337.0, 18.0], [336.0, 17.09090909090909], [338.0, 18.615384615384617], [339.0, 19.099999999999998], [340.0, 25.333333333333332], [341.0, 24.454545454545453], [342.0, 37.857142857142854], [343.0, 28.46153846153846], [344.0, 30.099999999999998], [350.0, 24.3], [351.0, 53.0], [348.0, 28.818181818181817], [349.0, 24.307692307692303], [345.0, 24.350000000000005], [346.0, 25.714285714285715], [347.0, 8.4], [353.0, 37.09090909090909], [352.0, 67.5], [354.0, 37.857142857142854], [364.0, 70.4], [365.0, 96.92857142857143], [366.0, 95.19999999999999], [367.0, 124.39999999999998], [361.0, 82.0], [356.0, 71.57142857142857], [357.0, 90.22222222222221], [358.0, 79.0], [359.0, 99.93333333333332], [362.0, 79.66666666666667], [363.0, 60.00000000000001], [381.0, 154.5], [369.0, 186.0909090909091], [371.0, 207.0], [370.0, 151.5], [380.0, 167.25], [374.0, 116.49999999999999], [375.0, 179.94999999999996], [376.0, 253.88888888888889], [377.0, 148.5], [378.0, 68.75], [379.0, 119.5], [382.0, 261.375], [383.0, 188.46666666666667], [385.0, 59.5], [384.0, 110.0], [386.0, 82.42857142857143], [387.0, 158.2857142857143], [388.0, 93.57142857142858], [389.0, 176.13636363636365], [390.0, 142.0], [391.0, 278.0], [392.0, 302.6], [399.0, 297.2857142857143], [398.0, 212.75], [396.0, 178.25], [397.0, 476.79999999999995], [393.0, 55.03846153846154], [394.0, 342.88235294117646], [395.0, 3.0], [401.0, 103.55555555555556], [400.0, 243.0], [402.0, 28.0], [405.0, 396.16666666666663], [406.0, 136.88888888888889], [407.0, 2.75], [411.0, 233.77777777777777], [410.0, 1.0], [413.0, 1.0], [415.0, 543.75], [414.0, 585.0], [417.0, 535.0769230769232], [416.0, 621.9166666666667], [418.0, 603.5714285714286], [419.0, 809.6428571428572], [420.0, 374.0], [421.0, 597.2], [422.0, 443.00000000000006], [423.0, 533.9], [424.0, 840.1428571428571], [430.0, 393.4], [431.0, 3.0], [428.0, 1.5], [429.0, 421.25], [425.0, 392.85714285714283], [426.0, 524.5], [427.0, 371.8235294117647], [435.0, 364.25000000000006], [433.0, 682.0], [432.0, 560.6], [434.0, 727.7777777777778], [437.0, 312.0], [438.0, 701.3333333333334], [439.0, 434.6363636363637], [440.0, 317.0], [446.0, 237.16666666666666], [447.0, 419.6666666666667], [444.0, 460.2962962962963], [445.0, 268.0], [441.0, 182.8], [442.0, 49.42857142857143], [443.0, 286.6451612903226], [449.0, 142.16666666666669], [448.0, 368.69999999999993], [450.0, 187.11764705882354], [451.0, 311.25], [452.0, 162.7], [453.0, 85.25], [454.0, 256.6666666666667], [455.0, 168.22222222222223], [456.0, 210.09999999999997], [462.0, 167.28571428571428], [463.0, 284.0], [460.0, 168.0], [461.0, 336.46666666666664], [457.0, 149.0], [458.0, 90.375], [459.0, 60.8888888888889], [466.0, 11.0], [465.0, 40.4], [467.0, 10.428571428571429], [476.0, 100.31250000000001], [477.0, 97.75], [479.0, 127.4], [478.0, 189.5], [468.0, 77.75], [469.0, 93.6], [470.0, 35.08333333333333], [471.0, 70.0], [472.0, 71.0], [473.0, 104.66666666666667], [474.0, 132.57142857142856], [475.0, 70.74074074074073], [481.0, 162.3888888888889], [480.0, 159.29166666666666], [482.0, 158.91666666666669], [483.0, 161.8695652173913], [484.0, 181.00000000000003], [485.0, 215.27272727272725], [486.0, 166.40624999999997], [487.0, 269.6], [488.0, 200.5], [494.0, 263.5], [495.0, 140.47826086956525], [492.0, 142.0], [493.0, 122.95], [489.0, 137.8125], [491.0, 125.80952380952382], [490.0, 163.66666666666666], [496.0, 50.81132075471699], [497.0, 118.4888888888889], [498.0, 161.19875776397512], [499.0, 229.05882352941177], [500.0, 215.54371785451886], [1.0, 12.0]], "isOverall": false, "label": "Listar Pistas", "isController": false}, {"data": [[379.3758000000004, 149.30199999999985]], "isOverall": false, "label": "Listar Pistas-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 22477.616666666665, "minX": 1.75003224E12, "maxY": 192778.75, "series": [{"data": [[1.75003224E12, 192778.75]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75003224E12, 22477.616666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75003224E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 149.30199999999985, "minX": 1.75003224E12, "maxY": 202.2141999999997, "series": [{"data": [[1.75003224E12, 202.2141999999997]], "isOverall": false, "label": "Obter Detalhes da Track Selecionada", "isController": false}, {"data": [[1.75003224E12, 149.30199999999985]], "isOverall": false, "label": "Listar Pistas", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75003224E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 141.53339999999994, "minX": 1.75003224E12, "maxY": 195.55359999999973, "series": [{"data": [[1.75003224E12, 195.55359999999973]], "isOverall": false, "label": "Obter Detalhes da Track Selecionada", "isController": false}, {"data": [[1.75003224E12, 141.53339999999994]], "isOverall": false, "label": "Listar Pistas", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75003224E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.667799999999999, "minX": 1.75003224E12, "maxY": 0.8045999999999991, "series": [{"data": [[1.75003224E12, 0.8045999999999991]], "isOverall": false, "label": "Obter Detalhes da Track Selecionada", "isController": false}, {"data": [[1.75003224E12, 0.667799999999999]], "isOverall": false, "label": "Listar Pistas", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75003224E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.75003224E12, "maxY": 1717.0, "series": [{"data": [[1.75003224E12, 1717.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75003224E12, 472.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75003224E12, 1089.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75003224E12, 759.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75003224E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75003224E12, 75.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75003224E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 4.0, "maxY": 693.5, "series": [{"data": [[516.0, 212.0], [527.0, 13.0], [596.0, 99.0], [621.0, 303.0], [652.0, 289.5], [664.0, 66.0], [648.0, 66.0], [734.0, 383.0], [746.0, 44.0], [195.0, 6.0], [815.0, 223.0], [52.0, 10.0], [215.0, 11.0], [63.0, 10.0], [4.0, 11.5], [69.0, 7.0], [326.0, 7.0], [355.0, 200.0], [407.0, 73.5], [419.0, 118.0], [427.0, 9.0], [465.0, 693.5], [484.0, 50.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[516.0, 8.0], [527.0, 2.0], [596.0, 28.0], [621.0, 2.0], [652.0, 399.5], [664.0, 160.0], [648.0, 11.5], [734.0, 299.0], [746.0, 8.5], [195.0, 3.0], [815.0, 14.0], [215.0, 10.5], [326.0, 3.0], [355.0, 32.5], [407.0, 8.0], [419.0, 15.5], [427.0, 7.0], [465.0, 14.0], [484.0, 20.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 815.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 4.0, "maxY": 658.5, "series": [{"data": [[516.0, 197.0], [527.0, 12.0], [596.0, 90.0], [621.0, 288.0], [652.0, 283.0], [664.0, 62.0], [648.0, 65.0], [734.0, 380.0], [746.0, 42.5], [195.0, 6.0], [815.0, 214.0], [52.0, 10.0], [215.0, 10.0], [63.0, 10.0], [4.0, 11.0], [69.0, 7.0], [326.0, 7.0], [355.0, 195.0], [407.0, 71.5], [419.0, 116.0], [427.0, 9.0], [465.0, 658.5], [484.0, 48.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[516.0, 0.0], [527.0, 0.0], [596.0, 28.0], [621.0, 0.0], [652.0, 398.0], [664.0, 160.0], [648.0, 8.5], [734.0, 299.0], [746.0, 8.5], [195.0, 2.5], [815.0, 0.0], [215.0, 0.0], [326.0, 2.5], [355.0, 0.0], [407.0, 0.0], [419.0, 0.0], [427.0, 7.0], [465.0, 0.0], [484.0, 20.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 815.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.75003224E12, "maxY": 166.66666666666666, "series": [{"data": [[1.75003224E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75003224E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 18.516666666666666, "minX": 1.75003224E12, "maxY": 125.33333333333333, "series": [{"data": [[1.75003224E12, 125.33333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75003224E12, 18.516666666666666]], "isOverall": false, "label": "401", "isController": false}, {"data": [[1.75003224E12, 22.816666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75003224E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 18.516666666666666, "minX": 1.75003224E12, "maxY": 64.81666666666666, "series": [{"data": [[1.75003224E12, 18.516666666666666]], "isOverall": false, "label": "Listar Pistas-failure", "isController": false}, {"data": [[1.75003224E12, 22.816666666666666]], "isOverall": false, "label": "Obter Detalhes da Track Selecionada-failure", "isController": false}, {"data": [[1.75003224E12, 60.516666666666666]], "isOverall": false, "label": "Obter Detalhes da Track Selecionada-success", "isController": false}, {"data": [[1.75003224E12, 64.81666666666666]], "isOverall": false, "label": "Listar Pistas-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75003224E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 41.333333333333336, "minX": 1.75003224E12, "maxY": 125.33333333333333, "series": [{"data": [[1.75003224E12, 125.33333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75003224E12, 41.333333333333336]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75003224E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

