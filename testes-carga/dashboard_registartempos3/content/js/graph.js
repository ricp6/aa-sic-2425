/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 32356.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 3.0], [30.6, 4.0], [30.7, 4.0], [30.8, 5.0], [30.9, 5.0], [31.0, 5.0], [31.1, 6.0], [31.2, 10.0], [31.3, 20.0], [31.4, 27.0], [31.5, 31.0], [31.6, 40.0], [31.7, 48.0], [31.8, 53.0], [31.9, 59.0], [32.0, 66.0], [32.1, 79.0], [32.2, 83.0], [32.3, 89.0], [32.4, 94.0], [32.5, 100.0], [32.6, 108.0], [32.7, 116.0], [32.8, 119.0], [32.9, 124.0], [33.0, 130.0], [33.1, 132.0], [33.2, 134.0], [33.3, 138.0], [33.4, 147.0], [33.5, 156.0], [33.6, 166.0], [33.7, 169.0], [33.8, 179.0], [33.9, 184.0], [34.0, 190.0], [34.1, 198.0], [34.2, 208.0], [34.3, 214.0], [34.4, 220.0], [34.5, 226.0], [34.6, 232.0], [34.7, 241.0], [34.8, 245.0], [34.9, 249.0], [35.0, 256.0], [35.1, 264.0], [35.2, 278.0], [35.3, 284.0], [35.4, 290.0], [35.5, 295.0], [35.6, 304.0], [35.7, 309.0], [35.8, 317.0], [35.9, 321.0], [36.0, 326.0], [36.1, 339.0], [36.2, 348.0], [36.3, 350.0], [36.4, 360.0], [36.5, 370.0], [36.6, 379.0], [36.7, 387.0], [36.8, 403.0], [36.9, 411.0], [37.0, 426.0], [37.1, 437.0], [37.2, 449.0], [37.3, 455.0], [37.4, 467.0], [37.5, 478.0], [37.6, 489.0], [37.7, 495.0], [37.8, 509.0], [37.9, 522.0], [38.0, 532.0], [38.1, 543.0], [38.2, 547.0], [38.3, 557.0], [38.4, 566.0], [38.5, 578.0], [38.6, 595.0], [38.7, 600.0], [38.8, 616.0], [38.9, 631.0], [39.0, 639.0], [39.1, 650.0], [39.2, 662.0], [39.3, 676.0], [39.4, 687.0], [39.5, 698.0], [39.6, 704.0], [39.7, 720.0], [39.8, 730.0], [39.9, 740.0], [40.0, 747.0], [40.1, 756.0], [40.2, 762.0], [40.3, 773.0], [40.4, 781.0], [40.5, 789.0], [40.6, 797.0], [40.7, 815.0], [40.8, 831.0], [40.9, 842.0], [41.0, 850.0], [41.1, 862.0], [41.2, 878.0], [41.3, 891.0], [41.4, 902.0], [41.5, 910.0], [41.6, 920.0], [41.7, 933.0], [41.8, 947.0], [41.9, 964.0], [42.0, 981.0], [42.1, 991.0], [42.2, 1009.0], [42.3, 1020.0], [42.4, 1032.0], [42.5, 1052.0], [42.6, 1072.0], [42.7, 1083.0], [42.8, 1099.0], [42.9, 1112.0], [43.0, 1123.0], [43.1, 1132.0], [43.2, 1139.0], [43.3, 1145.0], [43.4, 1167.0], [43.5, 1183.0], [43.6, 1196.0], [43.7, 1225.0], [43.8, 1240.0], [43.9, 1259.0], [44.0, 1271.0], [44.1, 1286.0], [44.2, 1299.0], [44.3, 1320.0], [44.4, 1338.0], [44.5, 1346.0], [44.6, 1363.0], [44.7, 1380.0], [44.8, 1394.0], [44.9, 1417.0], [45.0, 1437.0], [45.1, 1460.0], [45.2, 1474.0], [45.3, 1496.0], [45.4, 1518.0], [45.5, 1546.0], [45.6, 1556.0], [45.7, 1578.0], [45.8, 1594.0], [45.9, 1609.0], [46.0, 1636.0], [46.1, 1669.0], [46.2, 1698.0], [46.3, 1716.0], [46.4, 1742.0], [46.5, 1779.0], [46.6, 1792.0], [46.7, 1827.0], [46.8, 1872.0], [46.9, 1901.0], [47.0, 1914.0], [47.1, 1934.0], [47.2, 1954.0], [47.3, 1970.0], [47.4, 1985.0], [47.5, 2009.0], [47.6, 2031.0], [47.7, 2056.0], [47.8, 2088.0], [47.9, 2110.0], [48.0, 2144.0], [48.1, 2169.0], [48.2, 2190.0], [48.3, 2207.0], [48.4, 2226.0], [48.5, 2247.0], [48.6, 2260.0], [48.7, 2286.0], [48.8, 2303.0], [48.9, 2332.0], [49.0, 2343.0], [49.1, 2372.0], [49.2, 2385.0], [49.3, 2416.0], [49.4, 2433.0], [49.5, 2465.0], [49.6, 2489.0], [49.7, 2513.0], [49.8, 2552.0], [49.9, 2572.0], [50.0, 2603.0], [50.1, 2628.0], [50.2, 2650.0], [50.3, 2681.0], [50.4, 2707.0], [50.5, 2728.0], [50.6, 2742.0], [50.7, 2759.0], [50.8, 2770.0], [50.9, 2794.0], [51.0, 2831.0], [51.1, 2851.0], [51.2, 2861.0], [51.3, 2899.0], [51.4, 2916.0], [51.5, 2940.0], [51.6, 2960.0], [51.7, 2978.0], [51.8, 2996.0], [51.9, 3021.0], [52.0, 3045.0], [52.1, 3086.0], [52.2, 3121.0], [52.3, 3162.0], [52.4, 3198.0], [52.5, 3224.0], [52.6, 3240.0], [52.7, 3269.0], [52.8, 3292.0], [52.9, 3338.0], [53.0, 3357.0], [53.1, 3391.0], [53.2, 3412.0], [53.3, 3453.0], [53.4, 3484.0], [53.5, 3520.0], [53.6, 3573.0], [53.7, 3614.0], [53.8, 3631.0], [53.9, 3663.0], [54.0, 3725.0], [54.1, 3806.0], [54.2, 3849.0], [54.3, 3883.0], [54.4, 3918.0], [54.5, 3961.0], [54.6, 3994.0], [54.7, 4038.0], [54.8, 4106.0], [54.9, 4173.0], [55.0, 4227.0], [55.1, 4281.0], [55.2, 4338.0], [55.3, 4378.0], [55.4, 4430.0], [55.5, 4468.0], [55.6, 4526.0], [55.7, 4592.0], [55.8, 4635.0], [55.9, 4682.0], [56.0, 4743.0], [56.1, 4778.0], [56.2, 4797.0], [56.3, 4847.0], [56.4, 4879.0], [56.5, 4911.0], [56.6, 4951.0], [56.7, 4996.0], [56.8, 5038.0], [56.9, 5075.0], [57.0, 5115.0], [57.1, 5178.0], [57.2, 5215.0], [57.3, 5241.0], [57.4, 5266.0], [57.5, 5329.0], [57.6, 5386.0], [57.7, 5412.0], [57.8, 5449.0], [57.9, 5476.0], [58.0, 5523.0], [58.1, 5552.0], [58.2, 5570.0], [58.3, 5623.0], [58.4, 5650.0], [58.5, 5688.0], [58.6, 5733.0], [58.7, 5757.0], [58.8, 5793.0], [58.9, 5823.0], [59.0, 5863.0], [59.1, 5905.0], [59.2, 5938.0], [59.3, 5983.0], [59.4, 6011.0], [59.5, 6034.0], [59.6, 6055.0], [59.7, 6087.0], [59.8, 6104.0], [59.9, 6128.0], [60.0, 6168.0], [60.1, 6184.0], [60.2, 6206.0], [60.3, 6231.0], [60.4, 6255.0], [60.5, 6289.0], [60.6, 6313.0], [60.7, 6347.0], [60.8, 6358.0], [60.9, 6408.0], [61.0, 6424.0], [61.1, 6433.0], [61.2, 6464.0], [61.3, 6493.0], [61.4, 6520.0], [61.5, 6533.0], [61.6, 6557.0], [61.7, 6581.0], [61.8, 6627.0], [61.9, 6649.0], [62.0, 6674.0], [62.1, 6697.0], [62.2, 6744.0], [62.3, 6766.0], [62.4, 6788.0], [62.5, 6822.0], [62.6, 6846.0], [62.7, 6872.0], [62.8, 6910.0], [62.9, 6925.0], [63.0, 6944.0], [63.1, 6963.0], [63.2, 6998.0], [63.3, 7030.0], [63.4, 7053.0], [63.5, 7062.0], [63.6, 7074.0], [63.7, 7092.0], [63.8, 7111.0], [63.9, 7127.0], [64.0, 7139.0], [64.1, 7151.0], [64.2, 7167.0], [64.3, 7181.0], [64.4, 7198.0], [64.5, 7217.0], [64.6, 7242.0], [64.7, 7262.0], [64.8, 7284.0], [64.9, 7296.0], [65.0, 7315.0], [65.1, 7326.0], [65.2, 7348.0], [65.3, 7374.0], [65.4, 7389.0], [65.5, 7406.0], [65.6, 7431.0], [65.7, 7466.0], [65.8, 7475.0], [65.9, 7499.0], [66.0, 7510.0], [66.1, 7527.0], [66.2, 7550.0], [66.3, 7564.0], [66.4, 7584.0], [66.5, 7595.0], [66.6, 7613.0], [66.7, 7640.0], [66.8, 7673.0], [66.9, 7697.0], [67.0, 7715.0], [67.1, 7726.0], [67.2, 7743.0], [67.3, 7752.0], [67.4, 7779.0], [67.5, 7801.0], [67.6, 7814.0], [67.7, 7830.0], [67.8, 7848.0], [67.9, 7864.0], [68.0, 7878.0], [68.1, 7895.0], [68.2, 7903.0], [68.3, 7922.0], [68.4, 7953.0], [68.5, 7964.0], [68.6, 7977.0], [68.7, 8003.0], [68.8, 8020.0], [68.9, 8027.0], [69.0, 8036.0], [69.1, 8044.0], [69.2, 8057.0], [69.3, 8069.0], [69.4, 8081.0], [69.5, 8100.0], [69.6, 8116.0], [69.7, 8134.0], [69.8, 8149.0], [69.9, 8166.0], [70.0, 8188.0], [70.1, 8200.0], [70.2, 8216.0], [70.3, 8238.0], [70.4, 8247.0], [70.5, 8262.0], [70.6, 8270.0], [70.7, 8283.0], [70.8, 8296.0], [70.9, 8314.0], [71.0, 8325.0], [71.1, 8334.0], [71.2, 8343.0], [71.3, 8356.0], [71.4, 8379.0], [71.5, 8388.0], [71.6, 8406.0], [71.7, 8416.0], [71.8, 8428.0], [71.9, 8453.0], [72.0, 8469.0], [72.1, 8485.0], [72.2, 8503.0], [72.3, 8509.0], [72.4, 8524.0], [72.5, 8535.0], [72.6, 8540.0], [72.7, 8563.0], [72.8, 8575.0], [72.9, 8589.0], [73.0, 8606.0], [73.1, 8622.0], [73.2, 8641.0], [73.3, 8658.0], [73.4, 8672.0], [73.5, 8681.0], [73.6, 8690.0], [73.7, 8700.0], [73.8, 8714.0], [73.9, 8723.0], [74.0, 8733.0], [74.1, 8745.0], [74.2, 8756.0], [74.3, 8764.0], [74.4, 8771.0], [74.5, 8788.0], [74.6, 8799.0], [74.7, 8813.0], [74.8, 8822.0], [74.9, 8836.0], [75.0, 8841.0], [75.1, 8851.0], [75.2, 8860.0], [75.3, 8874.0], [75.4, 8887.0], [75.5, 8904.0], [75.6, 8910.0], [75.7, 8917.0], [75.8, 8920.0], [75.9, 8933.0], [76.0, 8941.0], [76.1, 8949.0], [76.2, 8956.0], [76.3, 8962.0], [76.4, 8972.0], [76.5, 8983.0], [76.6, 8994.0], [76.7, 9002.0], [76.8, 9014.0], [76.9, 9023.0], [77.0, 9033.0], [77.1, 9044.0], [77.2, 9054.0], [77.3, 9068.0], [77.4, 9077.0], [77.5, 9085.0], [77.6, 9094.0], [77.7, 9105.0], [77.8, 9124.0], [77.9, 9128.0], [78.0, 9135.0], [78.1, 9145.0], [78.2, 9151.0], [78.3, 9162.0], [78.4, 9171.0], [78.5, 9186.0], [78.6, 9198.0], [78.7, 9205.0], [78.8, 9214.0], [78.9, 9223.0], [79.0, 9234.0], [79.1, 9242.0], [79.2, 9250.0], [79.3, 9256.0], [79.4, 9266.0], [79.5, 9277.0], [79.6, 9282.0], [79.7, 9288.0], [79.8, 9299.0], [79.9, 9305.0], [80.0, 9315.0], [80.1, 9323.0], [80.2, 9334.0], [80.3, 9342.0], [80.4, 9353.0], [80.5, 9362.0], [80.6, 9376.0], [80.7, 9387.0], [80.8, 9398.0], [80.9, 9406.0], [81.0, 9419.0], [81.1, 9429.0], [81.2, 9439.0], [81.3, 9445.0], [81.4, 9452.0], [81.5, 9468.0], [81.6, 9481.0], [81.7, 9493.0], [81.8, 9505.0], [81.9, 9522.0], [82.0, 9527.0], [82.1, 9532.0], [82.2, 9544.0], [82.3, 9554.0], [82.4, 9567.0], [82.5, 9582.0], [82.6, 9589.0], [82.7, 9601.0], [82.8, 9609.0], [82.9, 9615.0], [83.0, 9624.0], [83.1, 9636.0], [83.2, 9643.0], [83.3, 9654.0], [83.4, 9669.0], [83.5, 9683.0], [83.6, 9691.0], [83.7, 9718.0], [83.8, 9731.0], [83.9, 9742.0], [84.0, 9746.0], [84.1, 9760.0], [84.2, 9771.0], [84.3, 9786.0], [84.4, 9791.0], [84.5, 9801.0], [84.6, 9805.0], [84.7, 9823.0], [84.8, 9834.0], [84.9, 9856.0], [85.0, 9870.0], [85.1, 9885.0], [85.2, 9905.0], [85.3, 9924.0], [85.4, 9938.0], [85.5, 9949.0], [85.6, 9961.0], [85.7, 9986.0], [85.8, 10003.0], [85.9, 10013.0], [86.0, 10034.0], [86.1, 10058.0], [86.2, 10091.0], [86.3, 10124.0], [86.4, 10136.0], [86.5, 10161.0], [86.6, 10181.0], [86.7, 10211.0], [86.8, 10231.0], [86.9, 10257.0], [87.0, 10286.0], [87.1, 10303.0], [87.2, 10352.0], [87.3, 10367.0], [87.4, 10385.0], [87.5, 10399.0], [87.6, 10435.0], [87.7, 10483.0], [87.8, 10554.0], [87.9, 10581.0], [88.0, 10617.0], [88.1, 10653.0], [88.2, 10689.0], [88.3, 10709.0], [88.4, 10761.0], [88.5, 10794.0], [88.6, 10871.0], [88.7, 10938.0], [88.8, 10984.0], [88.9, 11010.0], [89.0, 11104.0], [89.1, 11140.0], [89.2, 11178.0], [89.3, 11219.0], [89.4, 11271.0], [89.5, 11313.0], [89.6, 11357.0], [89.7, 11409.0], [89.8, 11524.0], [89.9, 11612.0], [90.0, 11665.0], [90.1, 11769.0], [90.2, 11791.0], [90.3, 11857.0], [90.4, 11964.0], [90.5, 12023.0], [90.6, 12084.0], [90.7, 12175.0], [90.8, 12263.0], [90.9, 12318.0], [91.0, 12406.0], [91.1, 12506.0], [91.2, 12584.0], [91.3, 12651.0], [91.4, 12768.0], [91.5, 12849.0], [91.6, 12887.0], [91.7, 12988.0], [91.8, 13043.0], [91.9, 13172.0], [92.0, 13257.0], [92.1, 13384.0], [92.2, 13436.0], [92.3, 13484.0], [92.4, 13598.0], [92.5, 13703.0], [92.6, 13804.0], [92.7, 13867.0], [92.8, 13970.0], [92.9, 14039.0], [93.0, 14114.0], [93.1, 14251.0], [93.2, 14307.0], [93.3, 14367.0], [93.4, 14445.0], [93.5, 14501.0], [93.6, 14547.0], [93.7, 14608.0], [93.8, 14678.0], [93.9, 14707.0], [94.0, 14769.0], [94.1, 14841.0], [94.2, 14885.0], [94.3, 14938.0], [94.4, 15002.0], [94.5, 15057.0], [94.6, 15113.0], [94.7, 15184.0], [94.8, 15252.0], [94.9, 15313.0], [95.0, 15387.0], [95.1, 15464.0], [95.2, 15549.0], [95.3, 15637.0], [95.4, 15801.0], [95.5, 15892.0], [95.6, 16029.0], [95.7, 16109.0], [95.8, 16210.0], [95.9, 16333.0], [96.0, 16534.0], [96.1, 16686.0], [96.2, 16863.0], [96.3, 16967.0], [96.4, 17070.0], [96.5, 17182.0], [96.6, 17292.0], [96.7, 17414.0], [96.8, 17532.0], [96.9, 17618.0], [97.0, 17684.0], [97.1, 17864.0], [97.2, 18048.0], [97.3, 18351.0], [97.4, 18666.0], [97.5, 18818.0], [97.6, 18988.0], [97.7, 19278.0], [97.8, 19727.0], [97.9, 19975.0], [98.0, 20091.0], [98.1, 20316.0], [98.2, 20652.0], [98.3, 20867.0], [98.4, 21415.0], [98.5, 22230.0], [98.6, 22705.0], [98.7, 23041.0], [98.8, 23308.0], [98.9, 23667.0], [99.0, 23927.0], [99.1, 24314.0], [99.2, 24388.0], [99.3, 24521.0], [99.4, 24909.0], [99.5, 26026.0], [99.6, 27947.0], [99.7, 30403.0], [99.8, 30743.0], [99.9, 31328.0], [100.0, 32356.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2600.0, "series": [{"data": [[0.0, 2600.0], [100.0, 129.0], [200.0, 116.0], [300.0, 95.0], [400.0, 77.0], [500.0, 77.0], [600.0, 67.0], [700.0, 87.0], [800.0, 60.0], [900.0, 64.0], [1000.0, 52.0], [1100.0, 65.0], [1200.0, 47.0], [1300.0, 50.0], [1400.0, 40.0], [1500.0, 42.0], [1600.0, 30.0], [1700.0, 31.0], [1800.0, 22.0], [1900.0, 45.0], [2000.0, 31.0], [2100.0, 33.0], [2200.0, 42.0], [2300.0, 40.0], [2400.0, 26.0], [2500.0, 30.0], [2600.0, 30.0], [2700.0, 49.0], [2800.0, 27.0], [2900.0, 44.0], [3000.0, 20.0], [3100.0, 24.0], [3300.0, 26.0], [3200.0, 32.0], [3400.0, 26.0], [3500.0, 14.0], [3600.0, 25.0], [3700.0, 12.0], [3800.0, 21.0], [3900.0, 21.0], [4000.0, 13.0], [4100.0, 12.0], [4200.0, 17.0], [4300.0, 17.0], [4400.0, 15.0], [4600.0, 16.0], [4500.0, 13.0], [4700.0, 24.0], [4800.0, 21.0], [5000.0, 22.0], [5100.0, 13.0], [4900.0, 19.0], [5200.0, 26.0], [5300.0, 15.0], [5600.0, 21.0], [5500.0, 27.0], [5400.0, 21.0], [5700.0, 24.0], [5800.0, 20.0], [6100.0, 32.0], [6000.0, 36.0], [5900.0, 21.0], [6300.0, 26.0], [6200.0, 30.0], [6600.0, 28.0], [6400.0, 36.0], [6500.0, 34.0], [6800.0, 25.0], [6700.0, 28.0], [6900.0, 35.0], [7000.0, 42.0], [7100.0, 56.0], [7400.0, 34.0], [7200.0, 38.0], [7300.0, 46.0], [7500.0, 50.0], [7600.0, 30.0], [7700.0, 46.0], [7800.0, 54.0], [7900.0, 41.0], [8000.0, 66.0], [8100.0, 48.0], [8700.0, 73.0], [8200.0, 60.0], [8300.0, 58.0], [8400.0, 50.0], [8500.0, 60.0], [8600.0, 60.0], [8800.0, 71.0], [8900.0, 92.0], [9100.0, 79.0], [9200.0, 95.0], [9000.0, 81.0], [9400.0, 74.0], [9300.0, 79.0], [9600.0, 77.0], [9700.0, 67.0], [9500.0, 75.0], [10000.0, 35.0], [9900.0, 48.0], [10100.0, 34.0], [10200.0, 35.0], [9800.0, 56.0], [10300.0, 34.0], [10700.0, 19.0], [10500.0, 18.0], [10400.0, 18.0], [10600.0, 25.0], [10800.0, 10.0], [11100.0, 21.0], [10900.0, 19.0], [11200.0, 17.0], [11000.0, 10.0], [11400.0, 8.0], [11600.0, 15.0], [11300.0, 17.0], [11700.0, 12.0], [11500.0, 7.0], [12100.0, 8.0], [12200.0, 12.0], [11900.0, 9.0], [11800.0, 12.0], [12000.0, 13.0], [12500.0, 10.0], [12700.0, 12.0], [12300.0, 9.0], [12400.0, 7.0], [12600.0, 8.0], [13000.0, 12.0], [13100.0, 6.0], [13300.0, 7.0], [13200.0, 10.0], [12800.0, 13.0], [12900.0, 8.0], [13400.0, 13.0], [13600.0, 6.0], [13500.0, 7.0], [13700.0, 9.0], [13800.0, 12.0], [14000.0, 8.0], [14200.0, 9.0], [14300.0, 12.0], [14100.0, 9.0], [13900.0, 9.0], [14700.0, 15.0], [14400.0, 13.0], [14800.0, 13.0], [14500.0, 16.0], [14600.0, 15.0], [14900.0, 13.0], [15100.0, 10.0], [15000.0, 15.0], [15300.0, 13.0], [15200.0, 12.0], [15400.0, 9.0], [15500.0, 10.0], [15600.0, 7.0], [15700.0, 4.0], [15800.0, 11.0], [16000.0, 8.0], [16300.0, 4.0], [16100.0, 8.0], [16200.0, 8.0], [15900.0, 4.0], [17400.0, 4.0], [16400.0, 4.0], [17000.0, 10.0], [17200.0, 6.0], [16600.0, 2.0], [16800.0, 5.0], [17600.0, 12.0], [18200.0, 3.0], [18000.0, 6.0], [17800.0, 5.0], [18400.0, 2.0], [18600.0, 5.0], [18800.0, 7.0], [19000.0, 5.0], [19400.0, 3.0], [19200.0, 1.0], [19600.0, 3.0], [20000.0, 5.0], [20200.0, 3.0], [20400.0, 3.0], [19800.0, 1.0], [21000.0, 2.0], [20600.0, 5.0], [21400.0, 1.0], [20800.0, 1.0], [22400.0, 3.0], [22000.0, 2.0], [22200.0, 1.0], [21600.0, 1.0], [23400.0, 2.0], [23200.0, 1.0], [23000.0, 4.0], [22800.0, 2.0], [22600.0, 1.0], [24400.0, 4.0], [24200.0, 3.0], [23600.0, 5.0], [24000.0, 2.0], [23800.0, 1.0], [24800.0, 3.0], [24600.0, 4.0], [26000.0, 1.0], [26800.0, 1.0], [27400.0, 2.0], [27600.0, 1.0], [27000.0, 1.0], [28400.0, 1.0], [29400.0, 1.0], [30400.0, 3.0], [30600.0, 2.0], [31200.0, 3.0], [16500.0, 8.0], [17100.0, 8.0], [17300.0, 7.0], [16900.0, 7.0], [16700.0, 4.0], [17500.0, 9.0], [17900.0, 4.0], [18100.0, 2.0], [17700.0, 3.0], [18300.0, 2.0], [18500.0, 3.0], [18700.0, 3.0], [18900.0, 3.0], [19300.0, 1.0], [19100.0, 2.0], [19700.0, 5.0], [19900.0, 6.0], [20300.0, 4.0], [20100.0, 3.0], [20900.0, 4.0], [20500.0, 2.0], [20700.0, 3.0], [21300.0, 1.0], [22300.0, 3.0], [21900.0, 2.0], [22100.0, 2.0], [23300.0, 3.0], [22700.0, 4.0], [23100.0, 4.0], [23500.0, 1.0], [22900.0, 1.0], [23700.0, 4.0], [24300.0, 11.0], [23900.0, 2.0], [24500.0, 2.0], [24100.0, 1.0], [25300.0, 1.0], [24900.0, 7.0], [26100.0, 1.0], [26500.0, 1.0], [27900.0, 1.0], [30700.0, 4.0], [30300.0, 2.0], [30100.0, 1.0], [29900.0, 2.0], [30500.0, 1.0], [30900.0, 2.0], [31500.0, 2.0], [31300.0, 2.0], [31700.0, 2.0], [31100.0, 1.0], [32100.0, 2.0], [32300.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 32300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 171.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4337.0, "series": [{"data": [[0.0, 171.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 485.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4337.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3007.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 268.98690476190524, "minX": 1.75003788E12, "maxY": 492.6684459043307, "series": [{"data": [[1.75003788E12, 456.42236024844726], [1.750038E12, 268.98690476190524], [1.75003794E12, 492.6684459043307]], "isOverall": false, "label": "Registar Voltas", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.750038E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 20694.0, "series": [{"data": [[2.0, 246.0], [3.0, 133.0], [4.0, 104.0], [5.0, 153.0], [6.0, 213.5], [7.0, 93.33333333333333], [8.0, 100.0], [9.0, 102.0], [10.0, 102.0], [11.0, 140.0], [12.0, 151.0], [13.0, 170.0], [14.0, 144.6], [15.0, 88.0], [16.0, 142.0], [17.0, 120.0], [18.0, 135.0], [19.0, 131.0], [20.0, 128.0], [21.0, 145.0], [22.0, 151.0], [23.0, 195.0], [24.0, 238.0], [25.0, 241.33333333333334], [26.0, 182.75], [27.0, 119.0], [28.0, 134.0], [29.0, 128.5], [30.0, 171.66666666666666], [31.0, 194.5], [33.0, 113.0], [32.0, 119.0], [35.0, 120.0], [34.0, 120.0], [37.0, 167.0], [36.0, 136.0], [39.0, 206.0], [38.0, 225.5], [41.0, 530.0], [40.0, 325.0], [43.0, 912.3333333333334], [42.0, 637.0], [45.0, 1145.0], [44.0, 659.25], [47.0, 757.0], [46.0, 225.5], [49.0, 757.5], [48.0, 1010.0], [51.0, 534.6666666666666], [50.0, 572.0], [53.0, 1038.0], [55.0, 1043.0], [54.0, 1360.0], [57.0, 1171.0], [56.0, 1550.0], [59.0, 1140.0], [58.0, 1283.0], [61.0, 2895.5], [60.0, 1332.0], [63.0, 2096.0], [62.0, 1779.0], [67.0, 1663.5], [66.0, 1972.0], [65.0, 2513.0], [64.0, 1057.5], [71.0, 2593.5], [70.0, 1768.75], [69.0, 1785.0], [68.0, 234.0], [75.0, 1921.3333333333335], [74.0, 803.8571428571428], [73.0, 289.0], [72.0, 1509.5], [79.0, 384.0], [78.0, 2453.0], [77.0, 2678.0], [76.0, 1130.6], [83.0, 2248.0], [82.0, 2547.75], [80.0, 1812.0], [87.0, 4281.25], [86.0, 2588.1000000000004], [84.0, 312.0], [91.0, 2975.0], [90.0, 3119.0], [89.0, 3245.0], [88.0, 2474.5], [95.0, 2975.3333333333335], [94.0, 1243.3333333333333], [93.0, 6595.5], [92.0, 9929.0], [99.0, 3795.0], [98.0, 3714.0], [97.0, 1288.25], [96.0, 3833.0], [103.0, 590.0], [102.0, 6170.75], [101.0, 3466.0], [100.0, 418.5], [107.0, 4387.0], [106.0, 2926.0], [105.0, 4340.333333333333], [104.0, 4056.0], [111.0, 5072.0], [110.0, 4939.5], [109.0, 1768.6666666666665], [108.0, 1993.5555555555557], [115.0, 2569.571428571429], [114.0, 2848.5], [113.0, 3481.6], [112.0, 3447.0], [119.0, 2753.25], [118.0, 5581.0], [116.0, 5201.333333333333], [123.0, 3864.6666666666665], [122.0, 375.3333333333333], [120.0, 3112.0], [127.0, 4883.571428571429], [126.0, 4133.333333333333], [125.0, 2950.5], [124.0, 4953.428571428571], [135.0, 6872.0], [134.0, 592.5], [133.0, 4856.666666666667], [132.0, 5192.125], [131.0, 243.0], [130.0, 440.0], [129.0, 6266.666666666667], [128.0, 5924.0], [141.0, 5679.625], [140.0, 2847.363636363637], [139.0, 4471.333333333333], [138.0, 10727.666666666668], [137.0, 6490.5], [136.0, 6935.666666666666], [151.0, 4070.0], [150.0, 6943.0], [149.0, 7345.0], [148.0, 974.0], [147.0, 1179.0], [146.0, 2576.333333333333], [145.0, 7375.0], [159.0, 3837.0], [158.0, 0.0], [157.0, 461.0], [156.0, 592.5], [155.0, 2307.5], [154.0, 577.5], [153.0, 6995.0], [152.0, 3724.0], [163.0, 2232.5], [164.0, 602.8], [167.0, 6191.0], [166.0, 646.0], [165.0, 6206.4], [162.0, 7791.25], [161.0, 6459.714285714286], [160.0, 6217.9375], [172.0, 6057.666666666667], [175.0, 8053.0], [174.0, 7231.0], [173.0, 5288.666666666667], [171.0, 788.0], [170.0, 5352.624999999999], [169.0, 3083.5], [168.0, 18681.333333333336], [178.0, 5945.666666666667], [179.0, 4523.875], [180.0, 11608.777777777777], [181.0, 506.5], [182.0, 4429.333333333333], [183.0, 4507.75], [177.0, 8653.333333333334], [176.0, 624.5], [184.0, 3651.8], [186.0, 514.0], [187.0, 781.4], [188.0, 697.0], [190.0, 2309.8], [191.0, 8463.0], [189.0, 2390.25], [185.0, 3428.3333333333335], [193.0, 4601.363636363637], [197.0, 5959.8], [199.0, 18218.0], [198.0, 9146.0], [196.0, 770.0], [195.0, 6558.666666666667], [194.0, 9283.4], [192.0, 8393.52941176471], [200.0, 7030.333333333334], [201.0, 870.3333333333333], [204.0, 15107.25], [207.0, 8259.0], [206.0, 4022.0], [205.0, 831.0], [203.0, 546.0], [202.0, 9204.333333333332], [208.0, 4749.8], [209.0, 3924.0], [210.0, 1030.3333333333333], [211.0, 5461.5], [215.0, 1034.5], [214.0, 887.6666666666666], [213.0, 918.0], [212.0, 4895.0], [216.0, 1310.3333333333333], [217.0, 943.0], [218.0, 1125.5], [219.0, 9923.333333333334], [221.0, 1320.8], [222.0, 6426.928571428572], [223.0, 10043.333333333332], [220.0, 12633.0], [224.0, 1493.25], [225.0, 1328.3333333333333], [226.0, 5906.666666666666], [231.0, 4102.0], [230.0, 915.0], [229.0, 5319.0], [228.0, 12411.0], [227.0, 1398.3333333333333], [234.0, 8551.2], [237.0, 5608.5], [239.0, 2058.6], [238.0, 5853.166666666667], [236.0, 6489.666666666667], [235.0, 7143.75], [233.0, 7962.249999999999], [232.0, 5195.2], [240.0, 1576.5], [241.0, 1922.5], [242.0, 2000.0], [243.0, 1500.75], [244.0, 1184.0], [245.0, 6283.666666666667], [246.0, 6095.75], [247.0, 1929.75], [248.0, 10317.75], [253.0, 6355.0], [254.0, 7770.624999999999], [255.0, 1389.6666666666667], [252.0, 5866.8], [251.0, 3402.1000000000004], [250.0, 6596.5], [249.0, 11642.363636363634], [268.0, 6415.666666666667], [256.0, 6498.5], [259.0, 2652.6666666666665], [258.0, 5521.666666666667], [257.0, 14053.625], [262.0, 2299.2], [261.0, 6261.5], [260.0, 7520.333333333333], [263.0, 2524.1666666666665], [264.0, 2541.4], [265.0, 2646.0], [266.0, 2012.75], [267.0, 2996.0], [269.0, 2733.0], [271.0, 6268.333333333334], [274.0, 10568.75], [273.0, 5346.0], [272.0, 4928.0], [275.0, 10076.25], [276.0, 2498.0], [277.0, 8539.75], [279.0, 2101.2499999999995], [278.0, 4898.5], [283.0, 2624.5], [282.0, 3212.0], [281.0, 4691.75], [280.0, 6941.0], [284.0, 2252.6666666666665], [287.0, 12524.833333333334], [286.0, 9941.42857142857], [285.0, 3034.0], [302.0, 5771.8], [294.0, 2934.5], [293.0, 4812.000000000001], [292.0, 4828.555555555556], [295.0, 6400.0], [296.0, 6518.5], [297.0, 3332.4], [298.0, 11712.25], [299.0, 3326.1111111111113], [301.0, 2744.125], [300.0, 2916.0], [291.0, 3192.5], [290.0, 2672.3333333333335], [289.0, 8132.666666666667], [288.0, 15776.25], [303.0, 11551.375], [307.0, 2210.2], [308.0, 5742.666666666667], [309.0, 2817.0], [310.0, 4008.8181818181815], [311.0, 2598.5], [306.0, 8366.0], [305.0, 4804.818181818181], [304.0, 11293.0], [312.0, 1808.6666666666667], [319.0, 4600.75], [318.0, 5279.666666666666], [313.0, 4325.222222222223], [314.0, 5039.5], [315.0, 2886.75], [316.0, 4158.2], [317.0, 14086.5], [333.0, 2445.0], [320.0, 2122.0], [321.0, 2466.5], [322.0, 4574.833333333333], [332.0, 2570.5], [323.0, 8181.333333333333], [327.0, 2997.8], [326.0, 9915.5], [325.0, 7637.5], [324.0, 3840.166666666667], [329.0, 7872.75], [330.0, 7580.5], [331.0, 11117.0], [334.0, 5148.25], [335.0, 17638.5], [328.0, 6608.562500000001], [338.0, 2401.25], [337.0, 1379.5], [339.0, 5539.333333333333], [340.0, 5682.25], [341.0, 11578.428571428572], [342.0, 6048.000000000001], [343.0, 2796.8333333333335], [336.0, 4142.0], [344.0, 4037.833333333333], [345.0, 7524.666666666667], [347.0, 9823.0], [346.0, 7625.071428571429], [348.0, 3240.3333333333335], [349.0, 2408.666666666667], [350.0, 6403.571428571428], [351.0, 10343.0], [353.0, 1194.3333333333333], [352.0, 4738.5], [354.0, 4406.0], [355.0, 8562.5], [357.0, 2445.333333333333], [356.0, 5304.0], [358.0, 7275.846153846153], [359.0, 3867.0], [362.0, 8668.0], [361.0, 5386.666666666667], [360.0, 6511.4], [363.0, 10106.09090909091], [364.0, 1632.0], [365.0, 4269.25], [366.0, 7495.5], [367.0, 7542.285714285713], [370.0, 6462.318181818182], [368.0, 4402.714285714285], [369.0, 8264.75], [371.0, 1814.0], [381.0, 20694.0], [380.0, 12301.5], [383.0, 9757.25], [376.0, 5361.0], [382.0, 8086.666666666666], [372.0, 7196.142857142857], [373.0, 6472.142857142857], [374.0, 7791.6], [375.0, 7552.499999999998], [377.0, 3746.3333333333335], [378.0, 4505.625], [379.0, 3462.6666666666665], [386.0, 7951.636363636365], [385.0, 16257.0], [387.0, 7745.5], [397.0, 12917.0], [396.0, 5242.0], [399.0, 8056.6], [398.0, 4888.0], [389.0, 3861.0], [388.0, 12860.0], [390.0, 3324.8], [391.0, 9869.666666666666], [384.0, 5474.0], [392.0, 6705.142857142857], [393.0, 8398.928571428572], [394.0, 3785.3333333333335], [395.0, 5709.6], [402.0, 5881.142857142858], [401.0, 11284.846153846152], [403.0, 3726.6666666666665], [412.0, 3018.0], [413.0, 4290.666666666667], [414.0, 6802.604166666666], [415.0, 7677.7], [404.0, 5576.0], [405.0, 7978.999999999998], [406.0, 3855.25], [407.0, 6015.4], [400.0, 2878.5], [408.0, 7064.666666666667], [409.0, 2580.625], [410.0, 5153.333333333333], [411.0, 10512.2], [418.0, 8631.764705882351], [416.0, 7648.5], [417.0, 8681.0], [419.0, 9072.049999999997], [428.0, 5734.0], [429.0, 8770.166666666666], [431.0, 19911.166666666668], [430.0, 0.0], [420.0, 4192.272727272727], [421.0, 7891.909090909092], [422.0, 8132.714285714285], [423.0, 5464.272727272727], [424.0, 9070.545454545454], [425.0, 5375.111111111111], [427.0, 5605.166666666666], [426.0, 7416.25], [446.0, 9064.0], [434.0, 4669.25], [433.0, 9855.444444444445], [432.0, 9076.285714285716], [439.0, 10281.999999999998], [438.0, 2580.3333333333335], [435.0, 2828.7333333333336], [445.0, 0.5], [444.0, 0.0], [436.0, 11171.210526315786], [437.0, 10912.57142857143], [440.0, 1427.5], [442.0, 6548.484848484848], [441.0, 6784.642857142857], [443.0, 8387.75], [447.0, 4153.363636363635], [460.0, 7879.823529411765], [450.0, 4726.285714285715], [449.0, 4989.294117647059], [448.0, 8651.538461538463], [455.0, 2263.2], [454.0, 4884.15], [451.0, 5050.105263157896], [452.0, 4502.230769230769], [453.0, 11483.812499999996], [457.0, 4547.150000000001], [458.0, 7763.318181818181], [459.0, 8525.25], [461.0, 7482.291666666666], [463.0, 0.5], [456.0, 8962.916666666666], [462.0, 4002.238095238095], [476.0, 6082.424999999998], [464.0, 6452.75], [465.0, 5537.7368421052615], [467.0, 7484.81818181818], [466.0, 6668.0], [469.0, 4242.406250000001], [468.0, 9056.875], [470.0, 2551.8], [471.0, 1.0], [474.0, 6064.965517241379], [473.0, 5544.46875], [472.0, 6932.066666666665], [475.0, 2737.8181818181815], [478.0, 4277.5], [479.0, 1.0], [477.0, 8546.0], [494.0, 5550.297520661155], [482.0, 8968.142857142857], [483.0, 5419.558823529412], [486.0, 4405.111111111111], [485.0, 3134.5652173913045], [484.0, 6849.624999999999], [487.0, 4955.346153846152], [481.0, 5332.5], [480.0, 3929.2631578947367], [488.0, 5323.137254901961], [491.0, 7356.181818181817], [490.0, 5035.0], [489.0, 7015.184210526315], [495.0, 3778.6190476190477], [493.0, 4744.386363636365], [492.0, 6919.307692307692], [499.0, 5221.685714285714], [500.0, 4263.476213475001], [498.0, 4510.833333333333], [497.0, 4147.437500000002], [496.0, 4989.864864864863], [1.0, 127.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[439.1302499999998, 4921.270999999988]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2764.8, "minX": 1.75003788E12, "maxY": 102176.73333333334, "series": [{"data": [[1.75003788E12, 28517.483333333334], [1.750038E12, 16521.916666666668], [1.75003794E12, 102176.73333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75003788E12, 2764.8], [1.750038E12, 5288.1], [1.75003794E12, 8498.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.750038E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3066.0483091787405, "minX": 1.75003788E12, "maxY": 6497.978571428561, "series": [{"data": [[1.75003788E12, 3066.0483091787405], [1.750038E12, 6497.978571428561], [1.75003794E12, 4929.349209607875]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.750038E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3037.365769496201, "minX": 1.75003788E12, "maxY": 6487.779166666679, "series": [{"data": [[1.75003788E12, 3037.365769496201], [1.750038E12, 6487.779166666679], [1.75003794E12, 4896.617737630881]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.750038E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.2624999999999996, "minX": 1.75003788E12, "maxY": 7.309178743961334, "series": [{"data": [[1.75003788E12, 7.309178743961334], [1.750038E12, 0.2624999999999996], [1.75003794E12, 0.5742147402997332]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.750038E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 82.0, "minX": 1.75003788E12, "maxY": 32356.0, "series": [{"data": [[1.75003788E12, 14985.0], [1.750038E12, 32356.0], [1.75003794E12, 30932.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75003788E12, 9269.8], [1.750038E12, 14113.8], [1.75003794E12, 15531.600000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75003788E12, 13663.300000000001], [1.750038E12, 24816.64], [1.75003794E12, 24356.08000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75003788E12, 9864.299999999996], [1.750038E12, 19150.6], [1.75003794E12, 17607.999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75003788E12, 350.0], [1.750038E12, 82.0], [1.75003794E12, 215.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75003788E12, 5192.0], [1.750038E12, 5445.0], [1.75003794E12, 9003.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.750038E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 30725.0, "series": [{"data": [[3.0, 355.0], [4.0, 246.0], [7.0, 153.0], [14.0, 102.0], [30.0, 136.5], [37.0, 1178.5], [39.0, 4227.0], [38.0, 7634.0], [41.0, 6907.0], [43.0, 6875.0], [44.0, 5480.0], [45.0, 4618.5], [47.0, 3631.0], [46.0, 4196.0], [49.0, 8939.5], [48.0, 7111.0], [50.0, 2422.5], [51.0, 6867.0], [52.0, 909.5], [53.0, 2587.5], [55.0, 8922.0], [54.0, 1668.0], [57.0, 9324.0], [56.0, 6365.0], [61.0, 6408.5], [60.0, 7624.5], [63.0, 9678.0], [67.0, 9776.5], [64.0, 8205.0], [69.0, 6160.0], [68.0, 5047.0], [70.0, 8606.0], [71.0, 12692.5], [74.0, 8670.5], [72.0, 10136.0], [75.0, 9128.0], [73.0, 9635.0], [78.0, 8378.0], [79.0, 9317.0], [77.0, 8460.0], [76.0, 9001.5], [80.0, 9585.0], [82.0, 8790.0], [84.0, 6915.0], [85.0, 8914.0], [87.0, 9397.5], [86.0, 8292.0], [90.0, 5503.5], [89.0, 8149.0], [88.0, 6198.0], [91.0, 9281.0], [93.0, 8915.0], [92.0, 9463.0], [95.0, 8018.0], [99.0, 7431.0], [96.0, 7055.0], [101.0, 8860.0], [100.0, 8406.0], [104.0, 9281.0], [107.0, 7591.5], [109.0, 7300.5], [111.0, 6894.0], [113.0, 6793.0], [116.0, 8383.0], [1.0, 101.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 1.0], [37.0, 0.0], [39.0, 30725.0], [41.0, 1.0], [43.0, 1.0], [44.0, 16492.0], [49.0, 155.0], [48.0, 265.0], [50.0, 2.0], [51.0, 1.0], [53.0, 1.0], [55.0, 1.0], [57.0, 1.0], [56.0, 1.0], [61.0, 1.0], [60.0, 1.0], [63.0, 1.0], [67.0, 1.0], [64.0, 1.5], [69.0, 1.0], [68.0, 1.0], [70.0, 1.0], [71.0, 1.0], [74.0, 1.0], [72.0, 1.0], [75.0, 1.0], [73.0, 1.0], [78.0, 1.0], [79.0, 1.0], [77.0, 1.0], [76.0, 1.0], [80.0, 1.0], [82.0, 1.0], [84.0, 1.0], [85.0, 1.0], [87.0, 1.0], [86.0, 1.0], [90.0, 1.0], [89.0, 1.0], [88.0, 1.0], [91.0, 1.0], [93.0, 1.0], [92.0, 1.0], [95.0, 1.0], [99.0, 1.0], [96.0, 11.5], [101.0, 1.0], [100.0, 1.0], [104.0, 1.0], [107.0, 1.0], [109.0, 1.0], [111.0, 1.0], [113.0, 1.0], [116.0, 1.0], [1.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 116.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 30725.0, "series": [{"data": [[3.0, 355.0], [4.0, 246.0], [7.0, 153.0], [14.0, 102.0], [30.0, 136.5], [37.0, 1178.5], [39.0, 4227.0], [38.0, 7634.0], [41.0, 6907.0], [43.0, 6875.0], [44.0, 5480.0], [45.0, 4618.5], [47.0, 3631.0], [46.0, 4196.0], [49.0, 8939.5], [48.0, 7111.0], [50.0, 2422.5], [51.0, 6867.0], [52.0, 909.5], [53.0, 2587.5], [55.0, 8922.0], [54.0, 1668.0], [57.0, 9324.0], [56.0, 6365.0], [61.0, 6408.5], [60.0, 7624.5], [63.0, 9678.0], [67.0, 9776.5], [64.0, 8205.0], [69.0, 6159.5], [68.0, 5047.0], [70.0, 8606.0], [71.0, 12692.5], [74.0, 8670.5], [72.0, 10136.0], [75.0, 9128.0], [73.0, 9635.0], [78.0, 8378.0], [79.0, 9317.0], [77.0, 8460.0], [76.0, 9001.5], [80.0, 9585.0], [82.0, 8790.0], [84.0, 6915.0], [85.0, 8914.0], [87.0, 9397.5], [86.0, 8292.0], [90.0, 5503.5], [89.0, 8149.0], [88.0, 6198.0], [91.0, 9281.0], [93.0, 8915.0], [92.0, 9463.0], [95.0, 8018.0], [99.0, 7431.0], [96.0, 7055.0], [101.0, 8860.0], [100.0, 8406.0], [104.0, 9281.0], [107.0, 7591.5], [109.0, 7300.5], [111.0, 6894.0], [113.0, 6793.0], [116.0, 8383.0], [1.0, 101.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 0.0], [37.0, 0.0], [39.0, 30725.0], [41.0, 0.0], [43.0, 0.0], [44.0, 16086.5], [49.0, 0.0], [48.0, 0.0], [50.0, 0.0], [51.0, 0.0], [53.0, 0.0], [55.0, 0.0], [57.0, 0.0], [56.0, 0.0], [61.0, 0.0], [60.0, 0.0], [63.0, 0.0], [67.0, 0.0], [64.0, 0.0], [69.0, 0.0], [68.0, 0.0], [70.0, 0.0], [71.0, 0.0], [74.0, 0.0], [72.0, 0.0], [75.0, 0.0], [73.0, 0.0], [78.0, 0.0], [79.0, 0.0], [77.0, 0.0], [76.0, 0.0], [80.0, 0.0], [82.0, 0.0], [84.0, 0.0], [85.0, 0.0], [87.0, 0.0], [86.0, 0.0], [90.0, 0.0], [89.0, 0.0], [88.0, 0.0], [91.0, 0.0], [93.0, 0.0], [92.0, 0.0], [95.0, 0.0], [99.0, 0.0], [96.0, 0.0], [101.0, 0.0], [100.0, 0.0], [104.0, 0.0], [107.0, 0.0], [109.0, 0.0], [111.0, 0.0], [113.0, 0.0], [116.0, 0.0], [1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 116.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 21.583333333333332, "minX": 1.75003788E12, "maxY": 80.81666666666666, "series": [{"data": [[1.75003788E12, 30.933333333333334], [1.750038E12, 21.583333333333332], [1.75003794E12, 80.81666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.750038E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.75003788E12, "maxY": 42.75, "series": [{"data": [[1.75003788E12, 13.95], [1.750038E12, 26.516666666666666], [1.75003794E12, 42.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.750038E12, 0.16666666666666666], [1.75003794E12, 0.13333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.75003788E12, 10.2], [1.750038E12, 1.3166666666666667], [1.75003794E12, 38.3]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.750038E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.4833333333333334, "minX": 1.75003788E12, "maxY": 42.75, "series": [{"data": [[1.75003788E12, 13.95], [1.750038E12, 26.516666666666666], [1.75003794E12, 42.75]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75003788E12, 10.2], [1.750038E12, 1.4833333333333334], [1.75003794E12, 38.43333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.750038E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.4833333333333334, "minX": 1.75003788E12, "maxY": 42.75, "series": [{"data": [[1.75003788E12, 13.95], [1.750038E12, 26.516666666666666], [1.75003794E12, 42.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75003788E12, 10.2], [1.750038E12, 1.4833333333333334], [1.75003794E12, 38.43333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.750038E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

