/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 9251.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 3.0], [5.1, 8.0], [5.2, 21.0], [5.3, 30.0], [5.4, 42.0], [5.5, 44.0], [5.6, 44.0], [5.7, 46.0], [5.8, 47.0], [5.9, 49.0], [6.0, 51.0], [6.1, 52.0], [6.2, 54.0], [6.3, 55.0], [6.4, 55.0], [6.5, 59.0], [6.6, 60.0], [6.7, 61.0], [6.8, 63.0], [6.9, 64.0], [7.0, 65.0], [7.1, 66.0], [7.2, 67.0], [7.3, 70.0], [7.4, 70.0], [7.5, 71.0], [7.6, 73.0], [7.7, 74.0], [7.8, 74.0], [7.9, 75.0], [8.0, 76.0], [8.1, 78.0], [8.2, 80.0], [8.3, 82.0], [8.4, 84.0], [8.5, 86.0], [8.6, 90.0], [8.7, 93.0], [8.8, 96.0], [8.9, 98.0], [9.0, 100.0], [9.1, 101.0], [9.2, 105.0], [9.3, 107.0], [9.4, 109.0], [9.5, 110.0], [9.6, 110.0], [9.7, 113.0], [9.8, 116.0], [9.9, 117.0], [10.0, 117.0], [10.1, 120.0], [10.2, 122.0], [10.3, 123.0], [10.4, 123.0], [10.5, 125.0], [10.6, 126.0], [10.7, 129.0], [10.8, 132.0], [10.9, 134.0], [11.0, 136.0], [11.1, 139.0], [11.2, 141.0], [11.3, 144.0], [11.4, 146.0], [11.5, 148.0], [11.6, 150.0], [11.7, 152.0], [11.8, 153.0], [11.9, 156.0], [12.0, 157.0], [12.1, 158.0], [12.2, 162.0], [12.3, 165.0], [12.4, 169.0], [12.5, 172.0], [12.6, 174.0], [12.7, 177.0], [12.8, 178.0], [12.9, 182.0], [13.0, 185.0], [13.1, 187.0], [13.2, 189.0], [13.3, 193.0], [13.4, 196.0], [13.5, 198.0], [13.6, 200.0], [13.7, 201.0], [13.8, 206.0], [13.9, 209.0], [14.0, 210.0], [14.1, 214.0], [14.2, 214.0], [14.3, 218.0], [14.4, 221.0], [14.5, 222.0], [14.6, 225.0], [14.7, 227.0], [14.8, 230.0], [14.9, 236.0], [15.0, 239.0], [15.1, 241.0], [15.2, 243.0], [15.3, 248.0], [15.4, 248.0], [15.5, 252.0], [15.6, 258.0], [15.7, 262.0], [15.8, 267.0], [15.9, 269.0], [16.0, 272.0], [16.1, 273.0], [16.2, 275.0], [16.3, 278.0], [16.4, 282.0], [16.5, 287.0], [16.6, 289.0], [16.7, 292.0], [16.8, 297.0], [16.9, 301.0], [17.0, 303.0], [17.1, 305.0], [17.2, 307.0], [17.3, 310.0], [17.4, 311.0], [17.5, 313.0], [17.6, 316.0], [17.7, 317.0], [17.8, 318.0], [17.9, 321.0], [18.0, 323.0], [18.1, 329.0], [18.2, 334.0], [18.3, 336.0], [18.4, 341.0], [18.5, 345.0], [18.6, 348.0], [18.7, 354.0], [18.8, 355.0], [18.9, 358.0], [19.0, 361.0], [19.1, 365.0], [19.2, 370.0], [19.3, 377.0], [19.4, 379.0], [19.5, 382.0], [19.6, 386.0], [19.7, 389.0], [19.8, 391.0], [19.9, 393.0], [20.0, 396.0], [20.1, 398.0], [20.2, 399.0], [20.3, 403.0], [20.4, 406.0], [20.5, 407.0], [20.6, 408.0], [20.7, 410.0], [20.8, 412.0], [20.9, 419.0], [21.0, 422.0], [21.1, 424.0], [21.2, 426.0], [21.3, 428.0], [21.4, 430.0], [21.5, 433.0], [21.6, 437.0], [21.7, 440.0], [21.8, 442.0], [21.9, 445.0], [22.0, 446.0], [22.1, 450.0], [22.2, 453.0], [22.3, 456.0], [22.4, 458.0], [22.5, 460.0], [22.6, 465.0], [22.7, 473.0], [22.8, 475.0], [22.9, 476.0], [23.0, 479.0], [23.1, 483.0], [23.2, 484.0], [23.3, 487.0], [23.4, 491.0], [23.5, 492.0], [23.6, 493.0], [23.7, 495.0], [23.8, 500.0], [23.9, 502.0], [24.0, 504.0], [24.1, 509.0], [24.2, 511.0], [24.3, 516.0], [24.4, 519.0], [24.5, 524.0], [24.6, 527.0], [24.7, 529.0], [24.8, 531.0], [24.9, 534.0], [25.0, 536.0], [25.1, 541.0], [25.2, 545.0], [25.3, 549.0], [25.4, 550.0], [25.5, 552.0], [25.6, 558.0], [25.7, 561.0], [25.8, 564.0], [25.9, 567.0], [26.0, 570.0], [26.1, 572.0], [26.2, 573.0], [26.3, 575.0], [26.4, 576.0], [26.5, 581.0], [26.6, 584.0], [26.7, 588.0], [26.8, 590.0], [26.9, 597.0], [27.0, 599.0], [27.1, 600.0], [27.2, 602.0], [27.3, 603.0], [27.4, 605.0], [27.5, 609.0], [27.6, 610.0], [27.7, 615.0], [27.8, 618.0], [27.9, 621.0], [28.0, 626.0], [28.1, 628.0], [28.2, 629.0], [28.3, 634.0], [28.4, 635.0], [28.5, 637.0], [28.6, 641.0], [28.7, 643.0], [28.8, 646.0], [28.9, 654.0], [29.0, 660.0], [29.1, 666.0], [29.2, 669.0], [29.3, 673.0], [29.4, 676.0], [29.5, 678.0], [29.6, 683.0], [29.7, 684.0], [29.8, 687.0], [29.9, 690.0], [30.0, 694.0], [30.1, 696.0], [30.2, 697.0], [30.3, 700.0], [30.4, 707.0], [30.5, 711.0], [30.6, 714.0], [30.7, 716.0], [30.8, 718.0], [30.9, 722.0], [31.0, 727.0], [31.1, 729.0], [31.2, 733.0], [31.3, 742.0], [31.4, 746.0], [31.5, 748.0], [31.6, 750.0], [31.7, 754.0], [31.8, 755.0], [31.9, 764.0], [32.0, 766.0], [32.1, 769.0], [32.2, 772.0], [32.3, 775.0], [32.4, 782.0], [32.5, 789.0], [32.6, 793.0], [32.7, 794.0], [32.8, 797.0], [32.9, 802.0], [33.0, 810.0], [33.1, 815.0], [33.2, 819.0], [33.3, 826.0], [33.4, 835.0], [33.5, 841.0], [33.6, 846.0], [33.7, 850.0], [33.8, 851.0], [33.9, 853.0], [34.0, 859.0], [34.1, 862.0], [34.2, 866.0], [34.3, 867.0], [34.4, 874.0], [34.5, 876.0], [34.6, 878.0], [34.7, 883.0], [34.8, 888.0], [34.9, 894.0], [35.0, 896.0], [35.1, 898.0], [35.2, 905.0], [35.3, 910.0], [35.4, 914.0], [35.5, 917.0], [35.6, 923.0], [35.7, 930.0], [35.8, 935.0], [35.9, 939.0], [36.0, 944.0], [36.1, 952.0], [36.2, 963.0], [36.3, 967.0], [36.4, 972.0], [36.5, 977.0], [36.6, 984.0], [36.7, 988.0], [36.8, 994.0], [36.9, 1001.0], [37.0, 1004.0], [37.1, 1006.0], [37.2, 1013.0], [37.3, 1017.0], [37.4, 1022.0], [37.5, 1030.0], [37.6, 1034.0], [37.7, 1038.0], [37.8, 1043.0], [37.9, 1050.0], [38.0, 1055.0], [38.1, 1057.0], [38.2, 1063.0], [38.3, 1076.0], [38.4, 1079.0], [38.5, 1082.0], [38.6, 1088.0], [38.7, 1094.0], [38.8, 1098.0], [38.9, 1106.0], [39.0, 1109.0], [39.1, 1116.0], [39.2, 1121.0], [39.3, 1127.0], [39.4, 1131.0], [39.5, 1134.0], [39.6, 1139.0], [39.7, 1142.0], [39.8, 1145.0], [39.9, 1150.0], [40.0, 1152.0], [40.1, 1157.0], [40.2, 1167.0], [40.3, 1174.0], [40.4, 1179.0], [40.5, 1185.0], [40.6, 1190.0], [40.7, 1197.0], [40.8, 1207.0], [40.9, 1210.0], [41.0, 1216.0], [41.1, 1222.0], [41.2, 1226.0], [41.3, 1230.0], [41.4, 1232.0], [41.5, 1235.0], [41.6, 1237.0], [41.7, 1240.0], [41.8, 1247.0], [41.9, 1253.0], [42.0, 1254.0], [42.1, 1258.0], [42.2, 1269.0], [42.3, 1271.0], [42.4, 1271.0], [42.5, 1275.0], [42.6, 1279.0], [42.7, 1284.0], [42.8, 1288.0], [42.9, 1290.0], [43.0, 1293.0], [43.1, 1293.0], [43.2, 1299.0], [43.3, 1305.0], [43.4, 1308.0], [43.5, 1311.0], [43.6, 1316.0], [43.7, 1319.0], [43.8, 1322.0], [43.9, 1324.0], [44.0, 1327.0], [44.1, 1332.0], [44.2, 1334.0], [44.3, 1339.0], [44.4, 1343.0], [44.5, 1352.0], [44.6, 1357.0], [44.7, 1362.0], [44.8, 1367.0], [44.9, 1375.0], [45.0, 1377.0], [45.1, 1380.0], [45.2, 1383.0], [45.3, 1387.0], [45.4, 1394.0], [45.5, 1397.0], [45.6, 1399.0], [45.7, 1403.0], [45.8, 1408.0], [45.9, 1411.0], [46.0, 1413.0], [46.1, 1417.0], [46.2, 1422.0], [46.3, 1425.0], [46.4, 1427.0], [46.5, 1430.0], [46.6, 1432.0], [46.7, 1436.0], [46.8, 1441.0], [46.9, 1445.0], [47.0, 1447.0], [47.1, 1453.0], [47.2, 1455.0], [47.3, 1459.0], [47.4, 1462.0], [47.5, 1463.0], [47.6, 1466.0], [47.7, 1468.0], [47.8, 1469.0], [47.9, 1471.0], [48.0, 1476.0], [48.1, 1478.0], [48.2, 1483.0], [48.3, 1486.0], [48.4, 1491.0], [48.5, 1494.0], [48.6, 1496.0], [48.7, 1498.0], [48.8, 1502.0], [48.9, 1503.0], [49.0, 1506.0], [49.1, 1508.0], [49.2, 1511.0], [49.3, 1514.0], [49.4, 1515.0], [49.5, 1518.0], [49.6, 1524.0], [49.7, 1528.0], [49.8, 1530.0], [49.9, 1531.0], [50.0, 1536.0], [50.1, 1537.0], [50.2, 1543.0], [50.3, 1546.0], [50.4, 1548.0], [50.5, 1550.0], [50.6, 1552.0], [50.7, 1557.0], [50.8, 1559.0], [50.9, 1562.0], [51.0, 1564.0], [51.1, 1565.0], [51.2, 1567.0], [51.3, 1570.0], [51.4, 1571.0], [51.5, 1576.0], [51.6, 1577.0], [51.7, 1579.0], [51.8, 1584.0], [51.9, 1587.0], [52.0, 1590.0], [52.1, 1597.0], [52.2, 1599.0], [52.3, 1601.0], [52.4, 1604.0], [52.5, 1606.0], [52.6, 1610.0], [52.7, 1614.0], [52.8, 1615.0], [52.9, 1621.0], [53.0, 1623.0], [53.1, 1626.0], [53.2, 1630.0], [53.3, 1632.0], [53.4, 1632.0], [53.5, 1635.0], [53.6, 1639.0], [53.7, 1642.0], [53.8, 1645.0], [53.9, 1648.0], [54.0, 1650.0], [54.1, 1651.0], [54.2, 1654.0], [54.3, 1658.0], [54.4, 1660.0], [54.5, 1662.0], [54.6, 1663.0], [54.7, 1666.0], [54.8, 1669.0], [54.9, 1670.0], [55.0, 1673.0], [55.1, 1675.0], [55.2, 1678.0], [55.3, 1682.0], [55.4, 1687.0], [55.5, 1691.0], [55.6, 1692.0], [55.7, 1693.0], [55.8, 1698.0], [55.9, 1700.0], [56.0, 1702.0], [56.1, 1704.0], [56.2, 1706.0], [56.3, 1708.0], [56.4, 1709.0], [56.5, 1710.0], [56.6, 1712.0], [56.7, 1715.0], [56.8, 1718.0], [56.9, 1721.0], [57.0, 1725.0], [57.1, 1727.0], [57.2, 1729.0], [57.3, 1732.0], [57.4, 1734.0], [57.5, 1737.0], [57.6, 1744.0], [57.7, 1748.0], [57.8, 1749.0], [57.9, 1751.0], [58.0, 1753.0], [58.1, 1754.0], [58.2, 1757.0], [58.3, 1759.0], [58.4, 1762.0], [58.5, 1763.0], [58.6, 1764.0], [58.7, 1767.0], [58.8, 1769.0], [58.9, 1773.0], [59.0, 1774.0], [59.1, 1777.0], [59.2, 1781.0], [59.3, 1783.0], [59.4, 1786.0], [59.5, 1787.0], [59.6, 1788.0], [59.7, 1791.0], [59.8, 1794.0], [59.9, 1799.0], [60.0, 1802.0], [60.1, 1804.0], [60.2, 1807.0], [60.3, 1808.0], [60.4, 1811.0], [60.5, 1814.0], [60.6, 1817.0], [60.7, 1818.0], [60.8, 1820.0], [60.9, 1822.0], [61.0, 1825.0], [61.1, 1828.0], [61.2, 1831.0], [61.3, 1835.0], [61.4, 1836.0], [61.5, 1838.0], [61.6, 1842.0], [61.7, 1846.0], [61.8, 1850.0], [61.9, 1852.0], [62.0, 1855.0], [62.1, 1856.0], [62.2, 1859.0], [62.3, 1862.0], [62.4, 1864.0], [62.5, 1867.0], [62.6, 1868.0], [62.7, 1870.0], [62.8, 1871.0], [62.9, 1874.0], [63.0, 1876.0], [63.1, 1881.0], [63.2, 1883.0], [63.3, 1885.0], [63.4, 1889.0], [63.5, 1891.0], [63.6, 1893.0], [63.7, 1896.0], [63.8, 1898.0], [63.9, 1901.0], [64.0, 1903.0], [64.1, 1906.0], [64.2, 1908.0], [64.3, 1909.0], [64.4, 1910.0], [64.5, 1913.0], [64.6, 1915.0], [64.7, 1920.0], [64.8, 1922.0], [64.9, 1927.0], [65.0, 1930.0], [65.1, 1933.0], [65.2, 1935.0], [65.3, 1936.0], [65.4, 1938.0], [65.5, 1939.0], [65.6, 1943.0], [65.7, 1944.0], [65.8, 1945.0], [65.9, 1946.0], [66.0, 1951.0], [66.1, 1955.0], [66.2, 1956.0], [66.3, 1960.0], [66.4, 1962.0], [66.5, 1964.0], [66.6, 1968.0], [66.7, 1970.0], [66.8, 1972.0], [66.9, 1973.0], [67.0, 1976.0], [67.1, 1980.0], [67.2, 1981.0], [67.3, 1985.0], [67.4, 1986.0], [67.5, 1987.0], [67.6, 1990.0], [67.7, 1993.0], [67.8, 1997.0], [67.9, 2001.0], [68.0, 2008.0], [68.1, 2010.0], [68.2, 2011.0], [68.3, 2014.0], [68.4, 2020.0], [68.5, 2022.0], [68.6, 2023.0], [68.7, 2026.0], [68.8, 2030.0], [68.9, 2032.0], [69.0, 2035.0], [69.1, 2039.0], [69.2, 2043.0], [69.3, 2047.0], [69.4, 2048.0], [69.5, 2052.0], [69.6, 2055.0], [69.7, 2060.0], [69.8, 2062.0], [69.9, 2064.0], [70.0, 2068.0], [70.1, 2071.0], [70.2, 2074.0], [70.3, 2075.0], [70.4, 2077.0], [70.5, 2080.0], [70.6, 2084.0], [70.7, 2087.0], [70.8, 2090.0], [70.9, 2092.0], [71.0, 2096.0], [71.1, 2100.0], [71.2, 2103.0], [71.3, 2107.0], [71.4, 2112.0], [71.5, 2115.0], [71.6, 2118.0], [71.7, 2121.0], [71.8, 2129.0], [71.9, 2133.0], [72.0, 2136.0], [72.1, 2143.0], [72.2, 2145.0], [72.3, 2147.0], [72.4, 2149.0], [72.5, 2151.0], [72.6, 2155.0], [72.7, 2172.0], [72.8, 2175.0], [72.9, 2179.0], [73.0, 2185.0], [73.1, 2190.0], [73.2, 2194.0], [73.3, 2199.0], [73.4, 2203.0], [73.5, 2208.0], [73.6, 2217.0], [73.7, 2218.0], [73.8, 2221.0], [73.9, 2225.0], [74.0, 2231.0], [74.1, 2238.0], [74.2, 2240.0], [74.3, 2245.0], [74.4, 2250.0], [74.5, 2257.0], [74.6, 2266.0], [74.7, 2270.0], [74.8, 2283.0], [74.9, 2297.0], [75.0, 2302.0], [75.1, 2309.0], [75.2, 2317.0], [75.3, 2323.0], [75.4, 2330.0], [75.5, 2336.0], [75.6, 2340.0], [75.7, 2341.0], [75.8, 2348.0], [75.9, 2353.0], [76.0, 2358.0], [76.1, 2361.0], [76.2, 2364.0], [76.3, 2367.0], [76.4, 2369.0], [76.5, 2372.0], [76.6, 2385.0], [76.7, 2390.0], [76.8, 2395.0], [76.9, 2405.0], [77.0, 2410.0], [77.1, 2419.0], [77.2, 2425.0], [77.3, 2427.0], [77.4, 2438.0], [77.5, 2449.0], [77.6, 2457.0], [77.7, 2461.0], [77.8, 2468.0], [77.9, 2474.0], [78.0, 2483.0], [78.1, 2492.0], [78.2, 2496.0], [78.3, 2504.0], [78.4, 2509.0], [78.5, 2519.0], [78.6, 2524.0], [78.7, 2527.0], [78.8, 2532.0], [78.9, 2542.0], [79.0, 2549.0], [79.1, 2552.0], [79.2, 2556.0], [79.3, 2561.0], [79.4, 2563.0], [79.5, 2567.0], [79.6, 2570.0], [79.7, 2574.0], [79.8, 2584.0], [79.9, 2589.0], [80.0, 2596.0], [80.1, 2606.0], [80.2, 2609.0], [80.3, 2613.0], [80.4, 2617.0], [80.5, 2624.0], [80.6, 2627.0], [80.7, 2631.0], [80.8, 2636.0], [80.9, 2645.0], [81.0, 2649.0], [81.1, 2653.0], [81.2, 2661.0], [81.3, 2670.0], [81.4, 2679.0], [81.5, 2687.0], [81.6, 2701.0], [81.7, 2705.0], [81.8, 2712.0], [81.9, 2716.0], [82.0, 2724.0], [82.1, 2727.0], [82.2, 2730.0], [82.3, 2734.0], [82.4, 2739.0], [82.5, 2742.0], [82.6, 2747.0], [82.7, 2751.0], [82.8, 2755.0], [82.9, 2765.0], [83.0, 2770.0], [83.1, 2773.0], [83.2, 2776.0], [83.3, 2782.0], [83.4, 2785.0], [83.5, 2789.0], [83.6, 2791.0], [83.7, 2794.0], [83.8, 2798.0], [83.9, 2803.0], [84.0, 2807.0], [84.1, 2812.0], [84.2, 2815.0], [84.3, 2819.0], [84.4, 2821.0], [84.5, 2826.0], [84.6, 2828.0], [84.7, 2833.0], [84.8, 2843.0], [84.9, 2847.0], [85.0, 2851.0], [85.1, 2854.0], [85.2, 2861.0], [85.3, 2866.0], [85.4, 2872.0], [85.5, 2873.0], [85.6, 2880.0], [85.7, 2883.0], [85.8, 2884.0], [85.9, 2894.0], [86.0, 2899.0], [86.1, 2906.0], [86.2, 2908.0], [86.3, 2916.0], [86.4, 2920.0], [86.5, 2926.0], [86.6, 2935.0], [86.7, 2942.0], [86.8, 2948.0], [86.9, 2951.0], [87.0, 2953.0], [87.1, 2955.0], [87.2, 2958.0], [87.3, 2962.0], [87.4, 2967.0], [87.5, 2976.0], [87.6, 2978.0], [87.7, 2979.0], [87.8, 2982.0], [87.9, 2989.0], [88.0, 2992.0], [88.1, 3001.0], [88.2, 3003.0], [88.3, 3004.0], [88.4, 3012.0], [88.5, 3015.0], [88.6, 3019.0], [88.7, 3024.0], [88.8, 3025.0], [88.9, 3028.0], [89.0, 3031.0], [89.1, 3038.0], [89.2, 3041.0], [89.3, 3046.0], [89.4, 3048.0], [89.5, 3054.0], [89.6, 3057.0], [89.7, 3065.0], [89.8, 3073.0], [89.9, 3078.0], [90.0, 3086.0], [90.1, 3088.0], [90.2, 3092.0], [90.3, 3094.0], [90.4, 3096.0], [90.5, 3101.0], [90.6, 3106.0], [90.7, 3109.0], [90.8, 3114.0], [90.9, 3120.0], [91.0, 3124.0], [91.1, 3130.0], [91.2, 3135.0], [91.3, 3146.0], [91.4, 3149.0], [91.5, 3156.0], [91.6, 3157.0], [91.7, 3160.0], [91.8, 3167.0], [91.9, 3170.0], [92.0, 3173.0], [92.1, 3177.0], [92.2, 3181.0], [92.3, 3185.0], [92.4, 3198.0], [92.5, 3206.0], [92.6, 3218.0], [92.7, 3219.0], [92.8, 3224.0], [92.9, 3226.0], [93.0, 3238.0], [93.1, 3241.0], [93.2, 3247.0], [93.3, 3254.0], [93.4, 3266.0], [93.5, 3268.0], [93.6, 3271.0], [93.7, 3275.0], [93.8, 3282.0], [93.9, 3285.0], [94.0, 3290.0], [94.1, 3294.0], [94.2, 3298.0], [94.3, 3307.0], [94.4, 3313.0], [94.5, 3319.0], [94.6, 3332.0], [94.7, 3344.0], [94.8, 3357.0], [94.9, 3360.0], [95.0, 3369.0], [95.1, 3375.0], [95.2, 3385.0], [95.3, 3392.0], [95.4, 3404.0], [95.5, 3420.0], [95.6, 3426.0], [95.7, 3436.0], [95.8, 3444.0], [95.9, 3450.0], [96.0, 3455.0], [96.1, 3471.0], [96.2, 3482.0], [96.3, 3490.0], [96.4, 3499.0], [96.5, 3504.0], [96.6, 3510.0], [96.7, 3517.0], [96.8, 3540.0], [96.9, 3555.0], [97.0, 3575.0], [97.1, 3588.0], [97.2, 3615.0], [97.3, 3636.0], [97.4, 3649.0], [97.5, 3659.0], [97.6, 3687.0], [97.7, 3706.0], [97.8, 3727.0], [97.9, 3756.0], [98.0, 3797.0], [98.1, 3820.0], [98.2, 3854.0], [98.3, 3936.0], [98.4, 3997.0], [98.5, 4030.0], [98.6, 4099.0], [98.7, 4313.0], [98.8, 4351.0], [98.9, 4639.0], [99.0, 4712.0], [99.1, 4906.0], [99.2, 5003.0], [99.3, 5145.0], [99.4, 5322.0], [99.5, 5371.0], [99.6, 5561.0], [99.7, 5626.0], [99.8, 5881.0], [99.9, 6073.0], [100.0, 9251.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 358.0, "series": [{"data": [[0.0, 358.0], [600.0, 131.0], [700.0, 102.0], [800.0, 91.0], [900.0, 70.0], [1000.0, 78.0], [1100.0, 76.0], [1200.0, 100.0], [1300.0, 96.0], [1400.0, 125.0], [1500.0, 139.0], [1600.0, 147.0], [1700.0, 161.0], [1800.0, 156.0], [1900.0, 162.0], [2000.0, 129.0], [2100.0, 89.0], [2300.0, 76.0], [2200.0, 65.0], [2400.0, 57.0], [2500.0, 70.0], [2600.0, 62.0], [2700.0, 90.0], [2800.0, 88.0], [2900.0, 82.0], [3000.0, 96.0], [3100.0, 78.0], [3200.0, 71.0], [3300.0, 47.0], [3400.0, 41.0], [3500.0, 30.0], [3600.0, 21.0], [3700.0, 13.0], [3800.0, 11.0], [3900.0, 5.0], [4000.0, 8.0], [4300.0, 5.0], [4200.0, 3.0], [4600.0, 4.0], [4400.0, 1.0], [4500.0, 1.0], [4800.0, 2.0], [4700.0, 3.0], [5100.0, 4.0], [4900.0, 4.0], [5000.0, 2.0], [5300.0, 5.0], [5200.0, 2.0], [5600.0, 5.0], [5400.0, 1.0], [5500.0, 3.0], [5700.0, 1.0], [5800.0, 2.0], [6000.0, 3.0], [6100.0, 1.0], [5900.0, 1.0], [6200.0, 1.0], [7500.0, 1.0], [9200.0, 1.0], [100.0, 185.0], [200.0, 131.0], [300.0, 134.0], [400.0, 144.0], [500.0, 129.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 261.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2049.0, "series": [{"data": [[0.0, 692.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 998.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2049.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 261.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.75003776E12, "maxY": 214.99649912478077, "series": [{"data": [[1.75003782E12, 1.0], [1.75003776E12, 214.99649912478077]], "isOverall": false, "label": "Registar Voltas", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75003782E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 3252.5, "series": [{"data": [[2.0, 129.0], [3.0, 201.0], [4.0, 82.0], [5.0, 118.0], [6.0, 125.0], [7.0, 123.0], [8.0, 106.0], [9.0, 129.0], [10.0, 97.5], [11.0, 54.0], [12.0, 54.0], [13.0, 50.0], [14.0, 48.0], [15.0, 55.0], [16.0, 84.0], [17.0, 76.0], [18.0, 87.0], [19.0, 79.0], [20.0, 66.0], [21.0, 62.0], [22.0, 57.0], [23.0, 55.0], [24.0, 63.0], [25.0, 60.0], [26.0, 108.5], [27.0, 84.0], [28.0, 116.66666666666667], [29.0, 154.0], [30.0, 194.0], [31.0, 84.0], [33.0, 146.5], [32.0, 124.0], [35.0, 55.0], [34.0, 155.0], [37.0, 77.33333333333333], [36.0, 54.0], [39.0, 66.6], [38.0, 59.0], [41.0, 66.66666666666666], [40.0, 58.0], [43.0, 75.0], [42.0, 75.0], [45.0, 138.0], [44.0, 73.0], [47.0, 76.0], [46.0, 70.5], [49.0, 110.75], [48.0, 160.6], [51.0, 107.0], [50.0, 146.0], [53.0, 98.0], [52.0, 0.0], [55.0, 67.0], [54.0, 92.0], [57.0, 64.0], [56.0, 63.71428571428571], [59.0, 75.0], [58.0, 1.0], [61.0, 70.5], [60.0, 70.0], [63.0, 53.5], [62.0, 2.0], [67.0, 81.0], [66.0, 68.0], [65.0, 125.2], [64.0, 65.0], [71.0, 170.6], [70.0, 77.33333333333333], [69.0, 65.0], [68.0, 116.5], [73.0, 194.36363636363637], [74.0, 262.0], [75.0, 207.33333333333334], [72.0, 150.5], [76.0, 228.14285714285714], [77.0, 199.66666666666666], [78.0, 363.27272727272725], [79.0, 400.0], [80.0, 407.7647058823529], [81.0, 383.62500000000006], [82.0, 493.0], [83.0, 488.19999999999993], [84.0, 436.25], [85.0, 254.0], [86.0, 328.8], [87.0, 71.5], [88.0, 375.0], [89.0, 43.0], [90.0, 444.0], [91.0, 477.0], [92.0, 390.16666666666663], [93.0, 781.0], [94.0, 690.6666666666666], [95.0, 424.66666666666663], [96.0, 470.5], [97.0, 43.0], [98.0, 378.0], [99.0, 137.5], [100.0, 203.42857142857142], [101.0, 460.64705882352933], [102.0, 939.2142857142857], [103.0, 556.1666666666666], [104.0, 83.0], [106.0, 675.6666666666667], [107.0, 518.5], [105.0, 460.33333333333337], [108.0, 523.0], [109.0, 760.0], [111.0, 214.0], [110.0, 961.5], [112.0, 291.6666666666667], [113.0, 389.3333333333333], [114.0, 331.5], [115.0, 894.25], [116.0, 404.6666666666667], [117.0, 558.5999999999999], [118.0, 667.6999999999999], [119.0, 777.6], [120.0, 1275.4117647058824], [121.0, 1300.0], [122.0, 1241.5], [123.0, 1314.8], [125.0, 529.3333333333334], [127.0, 603.8888888888889], [126.0, 123.0], [124.0, 1289.6], [130.0, 531.5], [131.0, 870.4], [135.0, 1313.0], [134.0, 3252.5], [133.0, 1810.0], [132.0, 251.66666666666666], [129.0, 1593.5], [128.0, 1829.0], [137.0, 1751.0], [138.0, 2088.421052631579], [140.0, 1969.3333333333333], [141.0, 970.8571428571429], [143.0, 1963.1666666666665], [142.0, 2205.0], [139.0, 2008.0], [136.0, 1726.8], [144.0, 704.7272727272727], [145.0, 1414.5], [147.0, 1712.8], [148.0, 1450.076923076923], [149.0, 1465.0], [150.0, 825.2857142857143], [151.0, 748.3333333333334], [146.0, 2335.5], [152.0, 1270.5384615384614], [153.0, 2164.8], [154.0, 2113.6875], [155.0, 1802.1333333333334], [156.0, 637.0], [157.0, 954.5], [158.0, 896.25], [159.0, 855.3333333333334], [160.0, 1009.2], [161.0, 1081.375], [162.0, 1273.9166666666667], [163.0, 651.0], [164.0, 762.6666666666667], [165.0, 838.25], [166.0, 2105.3076923076924], [167.0, 1307.25], [168.0, 1715.5], [169.0, 2018.9459459459456], [170.0, 1064.6666666666667], [171.0, 1029.1428571428573], [172.0, 1859.5], [173.0, 1437.8571428571427], [174.0, 1320.8333333333335], [175.0, 2303.75], [176.0, 1849.6666666666667], [177.0, 943.5], [178.0, 1929.1666666666667], [179.0, 1977.9090909090908], [181.0, 473.625], [182.0, 1272.1666666666665], [183.0, 678.4285714285714], [180.0, 2728.0], [184.0, 1131.3333333333333], [185.0, 1967.0], [186.0, 1848.6], [187.0, 1480.0], [188.0, 1032.6666666666667], [189.0, 1374.7142857142858], [190.0, 912.625], [191.0, 1097.1999999999998], [192.0, 482.3333333333333], [193.0, 1385.6666666666665], [195.0, 1399.0], [196.0, 1216.6666666666667], [197.0, 1732.375], [198.0, 3185.666666666667], [199.0, 1471.875], [194.0, 1803.3333333333333], [200.0, 944.6], [201.0, 793.7], [202.0, 1986.916666666667], [203.0, 1953.5], [204.0, 2129.2], [205.0, 704.8888888888889], [206.0, 1652.3000000000002], [207.0, 1073.5], [208.0, 2048.6538461538457], [209.0, 1963.7333333333333], [210.0, 1233.75], [211.0, 808.7142857142857], [212.0, 986.3333333333334], [213.0, 1160.875], [214.0, 1036.0], [215.0, 2093.6250000000005], [216.0, 2588.5], [217.0, 1450.1764705882354], [218.0, 2197.1607142857147], [219.0, 2360.8888888888887], [220.0, 2205.1333333333337], [223.0, 1870.4615384615386], [222.0, 2842.75], [221.0, 1904.8333333333335], [224.0, 2684.2173913043484], [225.0, 1919.2499999999998], [226.0, 1618.3333333333333], [227.0, 1602.6], [228.0, 1686.6666666666667], [229.0, 1996.3333333333333], [230.0, 1740.5], [231.0, 2067.878787878788], [232.0, 1631.6666666666665], [233.0, 2501.264150943396], [234.0, 2322.230769230769], [235.0, 684.5], [236.0, 1883.0], [237.0, 1793.8], [238.0, 1290.8], [239.0, 2229.4], [240.0, 2069.3333333333335], [241.0, 2145.571428571429], [243.0, 1349.0000000000002], [244.0, 1391.857142857143], [245.0, 1607.8695652173913], [246.0, 1931.6666666666665], [247.0, 1980.8461538461534], [242.0, 2152.4285714285716], [248.0, 2269.4453125], [249.0, 2106.457142857142], [250.0, 1597.7909774436093], [1.0, 158.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[214.94299999999959, 1548.8567499999988]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3.316666666666667, "minX": 1.75003776E12, "maxY": 41242.36666666667, "series": [{"data": [[1.75003782E12, 8.6], [1.75003776E12, 41242.36666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75003782E12, 3.316666666666667], [1.75003776E12, 12345.733333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75003782E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 158.0, "minX": 1.75003776E12, "maxY": 1549.2045511377833, "series": [{"data": [[1.75003782E12, 158.0], [1.75003776E12, 1549.2045511377833]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75003782E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 158.0, "minX": 1.75003776E12, "maxY": 1547.7994498624628, "series": [{"data": [[1.75003782E12, 158.0], [1.75003776E12, 1547.7994498624628]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75003782E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75003776E12, "maxY": 1.2308077019254802, "series": [{"data": [[1.75003782E12, 0.0], [1.75003776E12, 1.2308077019254802]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75003782E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 42.0, "minX": 1.75003776E12, "maxY": 9251.0, "series": [{"data": [[1.75003782E12, 158.0], [1.75003776E12, 9251.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75003782E12, 158.0], [1.75003776E12, 3108.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75003782E12, 158.0], [1.75003776E12, 4877.140000000009]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75003782E12, 158.0], [1.75003776E12, 3399.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75003782E12, 158.0], [1.75003776E12, 42.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75003782E12, 158.0], [1.75003776E12, 1631.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75003782E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 2872.0, "series": [{"data": [[2.0, 225.0], [40.0, 734.5], [49.0, 75.0], [61.0, 2092.0], [62.0, 345.0], [66.0, 631.5], [65.0, 2406.0], [67.0, 1343.0], [70.0, 615.0], [68.0, 1548.0], [69.0, 2820.0], [72.0, 1993.5], [75.0, 2324.5], [73.0, 1185.0], [79.0, 1869.0], [81.0, 2140.0], [82.0, 1038.5], [86.0, 1460.0], [87.0, 733.0], [91.0, 1646.0], [88.0, 2260.5], [92.0, 400.0], [95.0, 1853.0], [94.0, 2373.5], [97.0, 1039.0], [99.0, 2872.0], [96.0, 1831.0], [100.0, 1729.0], [107.0, 2072.0], [109.0, 2765.5], [110.0, 1745.0], [112.0, 559.5], [8.0, 122.5], [1.0, 158.0], [29.0, 76.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[49.0, 0.5], [65.0, 1.0], [68.0, 1.0], [75.0, 1.0], [72.0, 0.0], [79.0, 1.0], [81.0, 1.0], [87.0, 34.5], [86.0, 110.0], [91.0, 58.5], [88.0, 1.0], [92.0, 1.0], [95.0, 1.0], [94.0, 1.0], [97.0, 1.0], [99.0, 1.0], [96.0, 1.0], [100.0, 1.0], [107.0, 1.0], [109.0, 1.0], [110.0, 1.0], [112.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 112.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 2872.0, "series": [{"data": [[2.0, 225.0], [40.0, 734.5], [49.0, 75.0], [61.0, 2092.0], [62.0, 345.0], [66.0, 631.5], [65.0, 2406.0], [67.0, 1343.0], [70.0, 614.5], [68.0, 1548.0], [69.0, 2820.0], [72.0, 1993.5], [75.0, 2324.5], [73.0, 1185.0], [79.0, 1869.0], [81.0, 2140.0], [82.0, 1038.5], [86.0, 1460.0], [87.0, 733.0], [91.0, 1646.0], [88.0, 2260.5], [92.0, 400.0], [95.0, 1853.0], [94.0, 2373.5], [97.0, 1039.0], [99.0, 2872.0], [96.0, 1831.0], [100.0, 1729.0], [107.0, 2072.0], [109.0, 2765.5], [110.0, 1745.0], [112.0, 559.5], [8.0, 122.5], [1.0, 158.0], [29.0, 76.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[49.0, 0.0], [65.0, 0.0], [68.0, 0.0], [75.0, 0.0], [72.0, 0.0], [79.0, 0.0], [81.0, 0.0], [87.0, 0.0], [86.0, 0.0], [91.0, 0.0], [88.0, 0.0], [92.0, 0.0], [95.0, 0.0], [94.0, 0.0], [97.0, 0.0], [99.0, 0.0], [96.0, 0.0], [100.0, 0.0], [107.0, 0.0], [109.0, 0.0], [110.0, 0.0], [112.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 112.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75003776E12, "maxY": 66.65, "series": [{"data": [[1.75003782E12, 0.016666666666666666], [1.75003776E12, 66.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75003782E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75003776E12, "maxY": 62.3, "series": [{"data": [[1.75003782E12, 0.016666666666666666], [1.75003776E12, 62.3]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75003776E12, 4.35]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75003782E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75003776E12, "maxY": 62.3, "series": [{"data": [[1.75003782E12, 0.016666666666666666], [1.75003776E12, 62.3]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75003776E12, 4.35]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75003782E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75003776E12, "maxY": 62.3, "series": [{"data": [[1.75003782E12, 0.016666666666666666], [1.75003776E12, 62.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75003776E12, 4.35]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75003782E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

